{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programaci\u00f3n DAM","text":""},{"location":"#descripcion","title":"Descripci\u00f3n","text":"<p>Material del m\u00f3dulo de Programaci\u00f3n de 1\u00ba de DAM del IES CAMP DE MORVEDRE.</p> Fecha Versi\u00f3n Descripci\u00f3n 09/09/2025 1.0.0 Adaptaci\u00f3n del material. Estructura web con mkdocs."},{"location":"#enlaces-de-interes","title":"Enlaces de inter\u00e9s","text":"<ul> <li>Todo el material est\u00e1 disponible en el repositorio del m\u00f3dulo</li> </ul>"},{"location":"#autoria-y-revision","title":"Autor\u00eda y revisi\u00f3n","text":"<p>Material original de Lorenzo D\u00edaz de Haro y Jos\u00e9 Manuel Romero Mart\u00ednez. Adaptado y revisado por Jos\u00e9 Manuel Abad L\u00f3pez.</p>"},{"location":"#repositorio-y-contacto","title":"Repositorio y contacto","text":"<p>https://jmabadlopez.github.io jmabadlopez@edu.gva.es</p>"},{"location":"ejercicios/ud01/introduccion/","title":"Ejercicios de introducci\u00f3n","text":"Fecha Versi\u00f3n Descripci\u00f3n 14/09/2021 1.0.0 Versi\u00f3n inicial. 16/09/2021 1.0.1 Correcci\u00f3n de numeraci\u00f3n de ejercicios. 11/09/2025 1.0.5 Adaptaci\u00f3n mkdocs."},{"location":"ejercicios/ud01/introduccion/#ejercicios-unidad-1-introduccion-a-la-programacion","title":"Ejercicios Unidad 1 - Introducci\u00f3n a la programaci\u00f3n","text":""},{"location":"ejercicios/ud01/introduccion/#1-programas-y-algoritmos","title":"1. Programas y Algoritmos.","text":"<p>Responde a las siguientes preguntas con palabras tus (no t\u00e9cnicas).</p> <ol> <li>\u00bfQu\u00e9 hace un programa?</li> <li>\u00bfQu\u00e9 son los datos?</li> <li>\u00bfC\u00f3mo se comunica un programa con el usuario?</li> <li>Un programa y un algoritmo es lo mismo?</li> <li>\u00bfQu\u00e9 es un compilador?</li> <li>\u00bfPor qu\u00e9 Java es portable?</li> <li>Di 3 caracter\u00edsticas deseables de un algoritmo.</li> <li>Di verdadero o falso:<ul> <li>Una aplicaci\u00f3n inform\u00e1tica puede estar formada por muchos programas.</li> <li>Un algoritmo puede representarse de varias maneras.</li> <li>Un algoritmo puede programarse en diversos lenguajes de programaci\u00f3n.</li> <li>C es un lenguaje portable.</li> <li>Necesitamos un compilador de C para cada plataforma.</li> </ul> </li> </ol>"},{"location":"ejercicios/ud01/introduccion/#2-la-informacion","title":"2. La informaci\u00f3n","text":"<p>Responde a las siguientes preguntas con tus palabras (no hace falta que sean t\u00e9cnicas).</p> <ol> <li>\u00bfC\u00f3mo se guarda la informaci\u00f3n en los ordenadores? \u00bfPor qu\u00e9 tiene que estar organizada?</li> <li>\u00bfCu\u00e1l es la diferencia entre una variable y una constante?</li> <li>Di las tres caracter\u00edsticas de una variable.</li> <li>\u00bfQu\u00e9 problemas puede dar la falta de precisi\u00f3n?</li> <li> <p>Di cu\u00e1les de los siguientes identificadores son correctos o incorrectos:</p> <ul> <li><code>letra</code></li> <li><code>Letra</code></li> <li><code>123precio</code></li> <li><code>__variable__</code></li> <li><code>precio123</code></li> <li><code>cantidad_envases</code></li> <li><code>__.__</code></li> <li><code>Canto total</code></li> <li><code>CHAR</code></li> <li><code>char</code></li> </ul> </li> <li> <p>Piensa 2 ejemplos de datos compuestos y con qu\u00e9 tipos simples pueden estar formados.</p> </li> </ol>"},{"location":"ejercicios/ud01/introduccion/#3-expresiones","title":"3. Expresiones","text":"<ol> <li> <p>Calcula el valor de cada expresi\u00f3n si es v\u00e1lida. Si no es v\u00e1lida, indica el motivo.</p> <ul> <li><code>10 * 3 + 5 * 2</code></li> <li><code>15 % 4</code></li> <li><code>2 + 7 / 3</code></li> <li><code>4 +\" precio \"</code></li> <li><code>(5 + 2) &lt;8</code></li> <li><code>4&gt; = 4</code></li> <li><code>true OR false</code></li> <li><code>5 OR (2 &lt;3)</code></li> <li><code>(6&gt; = 2) OR (3 &lt;= 5)</code></li> <li><code>NOT (NOT (NOT (4 &lt;10)))</code></li> <li><code>4 + false</code></li> <li><code>4 + 2 * 4 / 2</code></li> <li><code>((5 &lt;0) AND (6&gt; = 7)) OR (45% 5 &lt;= 0</code></li> <li><code>((10 - 4)&gt; 0) OR true</code></li> <li><code>((10-4) &lt;0) OR true</code></li> </ul> </li> <li> <p>Dados los siguientes valores de las variables <code>X = 1, Y = 4, Z = 10</code> y la constante<code>PI = 3.14</code>, eval\u00faa las expresiones siguientes. Importante fijarse en el resultado del tipo de retorno.</p> <ul> <li><code>2 * X + 0.5 * Y - 1/5 * Z</code></li> <li><code>((PI * X ^ 2)&gt; Y) OR ((2 * PI * X) &lt;= Z)</code></li> <li><code>\" Hola, mundo! \" == \"Hola,\" + \"mundo!\"</code></li> <li><code>'a' == 'A'</code></li> </ul> </li> <li> <p>A partir de las siguientes constantes <code>gran = falso; redondo = cierto; suave = falso</code> indica cu\u00e1l ser\u00e1 el valor despu\u00e9s de cada una de las siguientes asignaciones:</p> <ul> <li><code>grande y redondo y suave</code></li> <li><code>grande o redondo o suave</code></li> <li><code>grande y redondo o suave</code></li> <li><code>grande o redondo y suave</code></li> <li><code>grande y (redondo o suave)</code></li> <li><code>(grande o redondo) y suave</code></li> </ul> </li> <li> <p>Indica con par\u00e9ntesis el orden en que el ordenador ejecutar\u00eda las diferentes operaciones.</p> <ul> <li><code>x + y + z</code></li> <li><code>x * y + z</code></li> <li><code>x + y * z</code></li> <li><code>x - y * z</code></li> <li><code>x + y / z</code></li> <li><code>x * y / z</code></li> <li><code>x / y / z</code></li> <li><code>x / y * y + x% y</code></li> <li><code>x / y + z + x</code></li> </ul> </li> <li> <p>Siendo a, b, c y d variables num\u00e9ricas, escribe la expresi\u00f3n l\u00f3gica correspondiente a:</p> <ul> <li>Los valores de b y c son ambos superiores al valor de d:</li> <li>a, b y c son id\u00e9nticos</li> <li>a, b y c son id\u00e9nticos pero diferentes de d</li> <li>b est\u00e1 comprendido, estrictamente, entre los valores de a y c</li> <li>b est\u00e1 comprendido, estrictamente, entre los valores de a y c, y el valor de a es menor que el valor de c</li> <li>Hay, al menos, dos valores id\u00e9nticos entre a, b y c</li> </ul> </li> <li> <p>Observa la siguiente secuencia de instrucciones. Responde a las cuestiones:</p> </li> </ol> <pre><code>a=5;\nb=7;\nc=2;\na=a+b+c;\nb=c/2;\na=a/b+a^c;\nESCRIBIR(a);\n</code></pre> <ul> <li>\u00bfQu\u00e9 valor contiene a despu\u00e9s de la cuarta instrucci\u00f3n?</li> <li>\u00bfQu\u00e9 valor contiene b despu\u00e9s de la quinta instrucci\u00f3n?</li> <li>\u00bfQu\u00e9 valor contiene a despu\u00e9s de la sexta instrucci\u00f3n?</li> <li>\u00bfQu\u00e9 valor imprime la \u00faltima instrucci\u00f3n?   </li> </ul>"},{"location":"ejercicios/ud01/lenguaje_java/","title":"Ejercicios del lenguaje Java","text":"Fecha Versi\u00f3n Descripci\u00f3n 14/09/2021 1.0.0 Versi\u00f3n inicial 01/09/2025 1.0.1 Revisi\u00f3n de los ejercicios. 11/09/2025 1.0.5 Adaptaci\u00f3n mkdocs."},{"location":"ejercicios/ud01/lenguaje_java/#ejercicios-unidad-1-introduccion-a-la-la-programacion-el-lenguaje-java","title":"Ejercicios Unidad 1 - Introducci\u00f3n a la la programaci\u00f3n. El lenguaje Java.","text":""},{"location":"ejercicios/ud01/lenguaje_java/#1-ejercicios-de-aproximacion","title":"1. Ejercicios de aproximaci\u00f3n.","text":"<ol> <li> <p>Si no tienes acceso a un IDE de Java, en la secci\u00f3n recursos de la plataforma encontrar\u00e1s las instrucciones de instalaci\u00f3n del IDE IntelliJ que usamos en clase.</p> </li> <li> <p>Escribe y compila el programa \u00a1Hola Mundo! (visto en los apuntes). Si cometes alg\u00fan error de sintaxis el compilador te indicar\u00e1 d\u00f3nde encontrarlo. Corr\u00edgelo y vuelve a compilar el programa hasta que no tengas ning\u00fan error y puedas ejecutarlo sin problema.</p> </li> <li> <p>Crea un nuevo programa y sustituye el c\u00f3digo por el siguiente. Comp\u00edlalo y soluciona los errores que tenga:</p> </li> </ol> <pre><code>public class {\n    public Static void main(String[] args){\n        system.out.println( I want this program to compile)\n    }\n</code></pre> <ol> <li>Escribe un programa que muestre tu nombre, direcci\u00f3n y n\u00famero de tel\u00e9fono cada uno en l\u00edneas separadas.</li> <li>Adapta el programa anterior para incluir una l\u00ednea en blanco entre su direcci\u00f3n y su n\u00famero de tel\u00e9fono.</li> </ol>"},{"location":"ejercicios/ud01/lenguaje_java/#2-tipos-de-datos-entrada-y-salida","title":"2. Tipos de datos: Entrada y salida.","text":"<ol> <li>\u00bfCu\u00e1l ser\u00eda el tipo de datos Java m\u00e1s apropiado para usar con los siguientes elementos de datos?</li> </ol> <ul> <li> <p>El n\u00famero m\u00e1ximo de personas permitidas en el aula.</p> </li> <li> <p>El peso de un alimento comprado en un supermercado.</p> </li> <li> <p>La calificaci\u00f3n otorgada a un estudiante (por ejemplo, \"A\", \"B\" o \"C\").</p> </li> </ul> <ol> <li>Explica cu\u00e1l, si alguna, de las siguientes l\u00edneas resultar\u00eda en un error del compilador:</li> </ol> <pre><code>int x = 75.5;\ndouble y = 75;\n</code></pre> <ol> <li>\u00bfCu\u00e1les de los siguientes ser\u00edan nombres v\u00e1lidos para una variable en Java?</li> </ol> <ul> <li> <p>ticket</p> </li> <li> <p>entradas de cine</p> </li> <li> <p>entradasdecine</p> </li> <li> <p>entradas_de_cine</p> </li> <li> <p>void</p> </li> <li> <p>Ticket</p> </li> </ul> <ol> <li>Identifica y corrige los errores en el programa proporcionado a continuaci\u00f3n, (solicita la edad del usuario e intenta devolver el a\u00f1o de nacimiento).</li> </ol> <pre><code>import java.util.Scanner;\npublic class Nacimiento\n{\n    public static void main (String[] args)\n    {\n        Scanner keyboard = new Scanner(System.in);\n        final int ANYO;\n        int edad, nacidoEn;\n\n        System.out.print(Cu\u00e1ntos a\u00f1os tienes? );\n\n        edad = keyboard.nextDouble();\n\n        nacidoEn = ANYO \u2013 edad;\n\n        System.out.println(\"Creo que naciste en \" + NacidoEn);\n    }\n}\n</code></pre> <ol> <li>\u00bfCu\u00e1l es el valor final de z en el siguiente programa?</li> </ol> <pre><code>public class ValorZ\n{\n    public static void main (String[] args)\n        {\n            int x, y, z;\n            x = 5;\n            y = x + 2;\n            x = 10;\n            z = y * x;\n        }\n}\n</code></pre> <ol> <li>\u00bfCu\u00e1l ser\u00eda el resultado final del programa a continuaci\u00f3n si el usuario introduce el n\u00famero 10?</li> </ol> <pre><code>import java.util.Scanner;\npublic class Calcula\n{\n    public static void main(String[] args )\n    {\n        Scanner sc = new Scanner(System.in);\n        int num1, num2;\n\n        num2 = 6;\n        System.out.print(\"Introduce valor \");\n        num1 = sc.nextInt();\n        num1 = num1 + 2;\n        num2 = num1 / num2;\n        num2 = ++num2;\n        num1 = num2 * num1++;\n        num2 = ++num1%2;\n        System.out.println(\"Resultado = \" + num2);\n    }\n}\n</code></pre> <ol> <li> <p>Utiliza pseudoc\u00f3digo para dise\u00f1ar un programa que le pide al usuario que introduzca valores para la longitud y la altura de un rect\u00e1ngulo y luego muestra el \u00e1rea y el per\u00edmetro de ese rect\u00e1ngulo.</p> </li> <li> <p>El siguiente programa fue escrito en un intento de intercambiar el valor de dos variables. Sin embargo, no da el resultado deseado:</p> </li> </ol> <pre><code>import java.util.Scanner;\npublic class intercambio\n{\n    public static void main(String[] args)\n    {\n        // declaraci\u00f3n de variables\n        int x, y;\n        // Introducci\u00f3n de datos\n        System.out.print(\"Escriba el valor para x \");\n        x = sc.nextInt();\n        System.out.print(\"Escriba el valor para y \");\n        y = sc.nextInt();\n        // C\u00f3digo que intercambia los valores\n        x = y;\n        y = x;\n        //muestra resultado\n        System.out.println(\"x = \" + x);\n        System.out.println(\"y = \" + y);\n    }\n}\n</code></pre> <ul> <li> <p>\u00bfPuedes ver por qu\u00e9 el programa no hace lo que esper\u00e1bamos?</p> </li> <li> <p>\u00bfCu\u00e1l ser\u00eda el resultado real del programa?</p> </li> <li> <p>\u00bfC\u00f3mo podr\u00edamos modificar el programa anterior para que los valores de las dos variables se intercambien correctamente?</p> </li> <li> <p>Detecta los errores y prop\u00f3n una soluci\u00f3n para ello.</p> </li> </ul>"},{"location":"ejercicios/ud01/lenguaje_java/#3-ejercicios-de-programacion","title":"3. Ejercicios de programaci\u00f3n","text":"<ol> <li>Implementa el algoritmo que realice la siguiente funcionalidad desarrollada en pseudoc\u00f3digo:</li> </ol> <pre><code>PROGRAMA COSTES\n BEGIN\n     ESCRIBIR titulo programa\n\n     ESCRIBIR Introducir el precio\n\n     LEER precio\n\n     ESCRIBIR Introducir los impuestos\n\n     LEER impuestos\n\n     precio = precio * (1 + impuestos/100)\n\n     ESCRIBIR precio\n END\n</code></pre> <ol> <li> <p>Implementa el programa de rect\u00e1ngulo que dise\u00f1\u00f3 en la pregunta 7 de los ejercicios anteriores.</p> </li> <li> <p>El \u00edndice de masa corporal IMC de una persona es una medida del peso de una persona en relaci\u00f3n con su altura. Se calcula de la siguiente manera:</p> </li> </ol> <pre><code>Se divide el peso de una persona (kg) por el cuadrado de su altura (metros)\n</code></pre> <ul> <li>Dise\u00f1a e implementa un programa que le permita al usuario ingresar su peso y estatura y luego imprimir su IMC.</li> </ul> <ol> <li>A un grupo de estudiantes se le indica que formen equipos de un tama\u00f1o espec\u00edfico para unos cursos.</li> </ol> <ul> <li>Dise\u00f1a e implementa un programa que solicite el n\u00famero de estudiantes del grupo y el tama\u00f1o de los equipos que se formar\u00e1n. El programa mostrar\u00e1 el n\u00famero de equipos formados y cu\u00e1ntos estudiantes quedan sin equipo.</li> </ul>"},{"location":"ejercicios/ud02/ejercicios_ud02/","title":"Ejercicios de programaci\u00f3n estructurada","text":"Fecha Versi\u00f3n Descripci\u00f3n 23/09/2021 1.0.0 Versi\u00f3n inicial. 27/09/2021 1.0.1 Correcci\u00f3n de errores. 14/10/2021 1.0.2 Se a\u00f1aden ejercicios de matrices 21/09/2025 2.0.0 Revisi\u00f3n. Adaptaci\u00f3n"},{"location":"ejercicios/ud02/ejercicios_ud02/#ejercicios-unidad-2-programacion-estructurada","title":"Ejercicios Unidad 2 - Programaci\u00f3n Estructurada","text":"<p>Instrucciones Generales:</p> <ul> <li>Resuelve cada ejercicio en los formatos indicados: <code>p</code> (pseudoc\u00f3digo), <code>df</code> (diagrama de flujo) o <code>j</code> (Java).</li> <li>Si un ejercicio no especifica de d\u00f3nde obtener los datos, siempre se deben solicitar por teclado al usuario.</li> </ul>"},{"location":"ejercicios/ud02/ejercicios_ud02/#bloque-1-repaso-de-fundamentos","title":"Bloque 1: Repaso de Fundamentos","text":"<ol> <li> <p>(p, j) Conversor de Unidades: Crea un programa que convierta una medida de pulgadas a cent\u00edmetros. Debe solicitar al usuario la cantidad de pulgadas y mostrar el resultado.</p> <ul> <li>Pista: 1 pulgada = 2.54 cm.</li> </ul> </li> <li> <p>(p, j) La Potencia C\u00fabica: Escribe un programa que pida un n\u00famero al usuario y calcule su cubo (el n\u00famero multiplicado por s\u00ed mismo tres veces).</p> </li> <li> <p>(p, j) Geometr\u00eda del Cilindro: Necesitamos un programa para una f\u00e1brica de envases. Debe calcular el \u00e1rea total y el volumen de un cilindro. Pide al usuario el radio y la altura.</p> <ul> <li>F\u00f3rmula Volumen: <code>V = PI * r\u00b2 * h</code></li> <li>F\u00f3rmula \u00c1rea: <code>A = 2 * PI * r * h + 2 * PI * r\u00b2</code></li> </ul> </li> <li> <p>(df, j) El Teorema de Pit\u00e1goras: Dise\u00f1a un programa que calcule la hipotenusa de un tri\u00e1ngulo rect\u00e1ngulo. El usuario introducir\u00e1 el valor de los dos catetos.</p> <ul> <li>F\u00f3rmula: <code>hipotenusa\u00b2 = cateto1\u00b2 + cateto2\u00b2</code></li> </ul> </li> <li> <p>(df, j) Conversor Imperial: Desarrolla un programa que convierta una distancia en metros a pies y pulgadas. El usuario debe introducir la cantidad de metros.</p> <ul> <li>Pista: 1 metro = 39.27 pulgadas; 1 pie = 12 pulgadas.</li> </ul> </li> <li> <p>(p, df, j) El Juego de los Vasos: Imagina que tienes tres vasos (variables A, B, C). Debes intercambiar sus contenidos de la siguiente manera: B toma el valor de A, A toma el valor de C, y C toma el valor de B. \u00bfC\u00f3mo lo har\u00edas sin perder el contenido original?</p> <ul> <li>Pista: Puede que necesites un vaso auxiliar.</li> </ul> </li> </ol>"},{"location":"ejercicios/ud02/ejercicios_ud02/#bloque-2-estructuras-condicionales","title":"Bloque 2: Estructuras Condicionales","text":"<ol> <li> <p>(df, j) \u00bfPar o Impar?: Crea un programa que pida un n\u00famero entero y determine si es par o impar, mostrando un mensaje claro al usuario.</p> </li> <li> <p>(p, j) Filtrando Pares: Escribe un programa que pida dos n\u00fameros enteros. Despu\u00e9s, debe mostrar en pantalla todos los n\u00fameros pares que se encuentren en el rango entre esos dos n\u00fameros. (NOTA: este ejercicio necesita estructuras repetitivas). </p> </li> <li> <p>(p, j) Producto de Positivos: Dise\u00f1a un programa que lea 5 n\u00fameros por teclado y calcule el producto de todos aquellos que sean positivos. Si un n\u00famero no es positivo, simplemente se ignora.</p> </li> <li> <p>(p, j) Divisi\u00f3n Segura: Pide dos n\u00fameros al usuario (aseg\u00farate de que no sean cero). Realiza la divisi\u00f3n decimal del primero entre el segundo y muestra el resultado.</p> </li> <li> <p>(df, j) El Ordenador de N\u00fameros: Pide al usuario tres n\u00fameros enteros y mu\u00e9stralos en pantalla ordenados de menor a mayor.</p> </li> <li> <p>(df, j) Mini-Calculadora: Pide dos n\u00fameros y muestra el resultado de su suma, producto y divisi\u00f3n. \u00a1Cuidado! Si el segundo n\u00famero es cero, la divisi\u00f3n no es posible. En ese caso, muestra un mensaje de error en lugar de intentar la operaci\u00f3n.</p> </li> <li> <p>(p, j) Calculadora de Superficies: Tu programa debe calcular el \u00e1rea de un rect\u00e1ngulo. Pide al usuario la base y la altura y muestra el resultado.</p> <ul> <li>F\u00f3rmula: <code>\u00e1rea = base * altura</code></li> </ul> </li> <li> <p>(p, j) El Detector de Signo: Pide un n\u00famero y dile al usuario si es \"Positivo\" o \"Negativo\". (Considera el cero como positivo).</p> </li> <li> <p>(p, j) Resolviendo Ecuaciones: Un sistema de ecuaciones lineales (<code>ax + by = c</code>, <code>dx + ey = f</code>) se puede resolver con las f\u00f3rmulas de Cramer. Tu programa debe pedir los coeficientes (a, b, c, d, e, f) y calcular los valores de <code>x</code> e <code>y</code>.</p> <p></p> </li> <li> <p>(p, j) Conversor de Temperatura: Crea un programa que convierta una temperatura de grados Celsius a Fahrenheit.</p> <p></p> </li> <li> <p>(df, j) Detector de A\u00f1os Bisiestos: Escribe un programa que pida un a\u00f1o y determine si es bisiesto.</p> <ul> <li>Reglas: Un a\u00f1o es bisiesto si es divisible por 4, excepto si es divisible por 100, a menos que tambi\u00e9n sea divisible por 400. (Ej: 2000 es bisiesto, 1900 no lo es).</li> </ul> </li> <li> <p>(df, j) Calendario Mensual: Pide al usuario un n\u00famero de mes (del 1 al 12) y, usando una estructura <code>switch</code>, muestra cu\u00e1ntos d\u00edas tiene ese mes. (No te preocupes por los a\u00f1os bisiestos).</p> </li> <li> <p>(df, j) Taquilla del F\u00fatbol: Programa el sistema de precios de un partido de f\u00fatbol sala seg\u00fan la edad:</p> <ul> <li>Menores de 5 a\u00f1os: Gratis</li> <li>Entre 5 y 15 a\u00f1os: 2\u20ac</li> <li>Mayores de 15 a\u00f1os: 3\u20ac</li> </ul> </li> <li> <p>(p, j) Calificador de Ex\u00e1menes: Pide la nota de un examen (0-10) y el sexo del alumno ('H' o 'M'). El programa debe mostrar la calificaci\u00f3n adaptada al g\u00e9nero:</p> <ul> <li>&lt; 5: SUSPENSO / SUSPENSA</li> <li>&gt;= 5 y &lt; 7: APROBADO / APROBADA</li> <li>&gt;= 7 y &lt; 9: NOTABLE</li> <li>&gt;= 9: SOBRESALIENTE</li> </ul> </li> <li> <p>(p, j) Clasificador de Tri\u00e1ngulos: Pide al usuario las longitudes de los tres lados de un tri\u00e1ngulo y determina si es:</p> <ul> <li>Equil\u00e1tero: 3 lados iguales.</li> <li>Is\u00f3sceles: 2 lados iguales.</li> <li>Escaleno: Ning\u00fan lado igual.</li> </ul> </li> <li> <p>(p, j) Gestor de Notas: Pide las 4 notas de un alumno, calcula su promedio y muestra un mensaje indicando si ha \"Aprobado\" o \"Suspendido\". Se aprueba con un promedio de 4.5 o m\u00e1s.</p> </li> <li> <p>(df, j) Evaluaci\u00f3n de Nivel: Un programa para corregir tests debe calcular el porcentaje de aciertos. Pide el total de preguntas y el n\u00famero de respuestas correctas. Luego, muestra el nivel:</p> <ul> <li>&gt;= 90%: Muy Bueno</li> <li>&gt;= 70% y &lt; 90%: Bueno</li> <li>&gt;= 50% y &lt; 70%: Regular</li> <li>&lt; 50%: Malo</li> </ul> </li> <li> <p>(p, j) Distancia Euclidiana: Calcula la distancia entre dos puntos en un plano (P1 y P2). Pide al usuario las coordenadas (x1, y1) y (x2, y2).</p> <p></p> </li> <li> <p>(df, j) Asignador de Colores: Pide al usuario que introduzca un car\u00e1cter y, seg\u00fan la letra, muestra el color asignado (ignora si es may\u00fascula o min\u00fascula):</p> <ul> <li>'r': ROJO</li> <li>'v': VERDE</li> <li>'a': AZUL</li> <li>'n': NEGRO</li> </ul> </li> </ol>"},{"location":"ejercicios/ud02/ejercicios_ud02/#bloque-3-estructuras-repetitivas-y-vectores","title":"Bloque 3: Estructuras Repetitivas y Vectores","text":"<ol> <li> <p>(df, j) La Tabla de Multiplicar: Pide un n\u00famero y muestra su tabla de multiplicar completa (del 0 al 10).</p> </li> <li> <p>(p, j) Suma hasta Negativo: El programa debe leer n\u00fameros hasta que el usuario introduzca uno negativo. En ese momento, mostrar\u00e1 la suma de todos los n\u00fameros positivos introducidos.</p> </li> <li> <p>(df, j) Calculadora de Factorial: Pide un n\u00famero entero y calcula su factorial (el producto de todos los enteros positivos desde 1 hasta ese n\u00famero).</p> </li> <li> <p>(p, j) Filtrando Positivos: Pide al usuario una serie de n\u00fameros (positivos o negativos). El programa terminar\u00e1 cuando se introduzca un 0 y mostrar\u00e1 en pantalla solo los n\u00fameros positivos que se leyeron.</p> </li> <li> <p>(p, j) Filtro Num\u00e9rico Avanzado: Lee 10 n\u00fameros por teclado y al final, muestra una lista con:</p> <ul> <li>Los n\u00fameros positivos menores que 5.</li> <li>Los n\u00fameros negativos mayores que -5.</li> </ul> </li> <li> <p>(df, j) Suma y Producto de Pares: Calcula y muestra la suma y el producto de los 100 primeros n\u00fameros pares (2, 4, 6, ..., 200).</p> </li> <li> <p>(p, j) Super Tabla de Multiplicar: Muestra las tablas de multiplicar de los 10 primeros n\u00fameros (del 1 al 10).</p> </li> <li> <p>(p, j) Suma Selectiva: Pide n\u00fameros enteros positivos. El programa se detiene si se introduce un n\u00famero menor o igual a 0. Al final, muestra la suma total de los n\u00fameros pares y la suma total de los impares.</p> </li> <li> <p>(p, j) Calculadora de Tri\u00e1ngulos Interactiva: Calcula la superficie de un tri\u00e1ngulo.</p> <ul> <li>Validaci\u00f3n: Aseg\u00farate de que la base y la altura introducidas sean positivas. Si no, vuelve a pedirlas.</li> <li>Repetici\u00f3n: Despu\u00e9s de mostrar el resultado, pregunta al usuario si desea calcular otra superficie. El programa se repetir\u00e1 hasta que responda que no.</li> </ul> <p></p> </li> <li> <p>(df, j) Men\u00fa Geom\u00e9trico: Crea un programa con un men\u00fa que permita al usuario elegir entre:</p> <ol> <li>Calcular el \u00e1rea de una circunferencia.</li> <li>Calcular el volumen de una esfera.</li> </ol> <p></p> </li> <li> <p>(p, df, j) El Cajero Autom\u00e1tico: Dado un importe en euros, calcula el desglose en el menor n\u00famero de billetes posible (de 500\u20ac a 5\u20ac).</p> </li> <li> <p>(p, j) Calculadora de Figuras Planas: Dise\u00f1a un programa con un men\u00fa para calcular el \u00e1rea y el per\u00edmetro de: c\u00edrculo, rect\u00e1ngulo, cuadrado, rombo y tri\u00e1ngulo. El usuario debe poder realizar varios c\u00e1lculos sin reiniciar el programa.</p> </li> <li> <p>(p, j) Potencias en un Rango: Pide dos n\u00fameros al usuario y muestra el cuadrado y el cubo de todos los n\u00fameros enteros que hay entre ellos.</p> </li> <li> <p>(p, df, j) Men\u00fa Anidado de Juegos: Crea un programa que muestre un men\u00fa principal. Seg\u00fan la opci\u00f3n elegida, debe mostrar los juegos de esa categor\u00eda o un submen\u00fa si es necesario.</p> <ol> <li>Juegos de sal\u00f3n: <code>cartas, ajedrez, damas, prendas</code>.</li> <li>Juegos al aire libre:<ul> <li>a) Individuales: <code>atletismo, senderismo, nataci\u00f3n</code></li> <li>b) Colectivos: <code>gimnasia, r\u00edtmica, rugby, polo, futbol</code>.</li> </ul> </li> <li>Salir</li> </ol> </li> <li> <p>(p, j) La Serie Num\u00e9rica: Calcula la suma de la serie <code>2 + 5 + 8 + 11 + ...</code> para todos los valores menores que 100. Resuelve el problema usando tres bucles diferentes: <code>while</code>, <code>do-while</code> y <code>for</code>.</p> </li> <li> <p>(p, j) Simulador de la Primitiva: \u00a1Vamos a crear un juego!</p> <ol> <li>Pide al usuario 6 n\u00fameros (del 1 al 49) para su boleto.</li> <li>Genera 6 n\u00fameros aleatorios (del 1 al 49, sin que se repitan) para la combinaci\u00f3n ganadora.</li> <li>Genera un reintegro aleatorio (del 0 al 9).</li> <li>Compara y muestra el n\u00famero de aciertos.</li> <li>Pregunta si quiere volver a jugar.</li> </ol> </li> <li> <p>(df, j) Brain Training: Simula un juego de c\u00e1lculo mental.</p> <ol> <li>Realiza 20 operaciones aleatorias (+, -, *, /) con dos n\u00fameros aleatorios (del 1 al 10).</li> <li>Pide el resultado al usuario en cada operaci\u00f3n.</li> <li>Si acierta, suma un punto.</li> <li>Al final, muestra el porcentaje de aciertos.</li> </ol> </li> <li> <p>(df, j) \u00bfQui\u00e9n es el Director?: Un juego de cine.</p> <ol> <li>Almacena en dos vectores paralelos 5 pel\u00edculas y sus directores.</li> <li>El programa elige una pel\u00edcula al azar y se la muestra al usuario.</li> <li>El usuario debe escribir el nombre del director.</li> <li>El usuario empieza con 5 vidas. Si falla, pierde una.</li> <li>El juego termina si se queda sin vidas o si decide no continuar.</li> <li>Al final, muestra el porcentaje de aciertos.</li> </ol> </li> </ol>"},{"location":"ejercicios/ud02/ejercicios_ud02/#bloque-4-retos-combinados","title":"Bloque 4: Retos Combinados","text":"<ol> <li> <p>(p, j) M\u00e1quina Expendedora: Programa el software de una m\u00e1quina que vende un producto a 2,10\u20ac.</p> <ul> <li>Pide al usuario que introduzca dinero.</li> <li>Si el dinero es insuficiente, muestra un mensaje de error.</li> <li>Si es suficiente, calcula el cambio a devolver usando el menor n\u00famero de monedas posible (dispones de monedas de 50, 20, 10 y 5 c\u00e9ntimos).</li> </ul> </li> <li> <p>(df, j) Ordenador Universal: Pide tres n\u00fameros al usuario. Luego, preg\u00fantale si quiere ordenarlos \"de mayor a menor\" o \"de menor a mayor\" y muestra el resultado. El programa debe permitir repetir la operaci\u00f3n con nuevos n\u00fameros.</p> </li> <li> <p>(p, j) Calculadora de Salario Neto: Calcula el salario neto semanal de un trabajador a partir de las horas trabajadas.</p> <ul> <li>Tarifa normal: 8\u20ac/hora (para las primeras 35 horas).</li> <li>Horas extra: Se pagan un 50% m\u00e1s que la tarifa normal.</li> <li>Impuestos:<ul> <li>Los primeros 600\u20ac del salario bruto est\u00e1n exentos.</li> <li>Los siguientes 400\u20ac tienen una tasa del 25%.</li> <li>El resto tiene una tasa del 45%.</li> </ul> </li> <li>El programa debe mostrar: salario bruto, total de impuestos y salario neto.</li> </ul> </li> <li> <p>(df, j) Facturaci\u00f3n de Hotel: Calcula la factura de un cliente. Pide el n\u00famero de d\u00edas de estancia y la categor\u00eda de la habitaci\u00f3n.</p> <ul> <li>Categor\u00eda A: 200\u20ac/d\u00eda</li> <li>Categor\u00eda B: 180\u20ac/d\u00eda</li> <li>Categor\u00eda C: 120\u20ac/d\u00eda</li> <li>Categor\u00eda D: 80\u20ac/d\u00eda</li> </ul> </li> <li> <p>(p, j) Simulador de Amortizaci\u00f3n de Pr\u00e9stamo: Una persona pide un pr\u00e9stamo de P euros y lo devuelve en cuotas mensuales de A euros, con un inter\u00e9s anual. El programa debe calcular y mostrar para cada mes: el inter\u00e9s pagado, cu\u00e1nto se reduce la deuda, el total de intereses pagados hasta la fecha, la deuda pendiente, y el n\u00famero total de pagos necesarios (el \u00faltimo podr\u00eda ser menor).</p> <ul> <li>Datos de prueba: Pr\u00e9stamo de 6000\u20ac, cuota de 135\u20ac, inter\u00e9s del 12% anual.</li> </ul> </li> <li> <p>(df, j) Facturaci\u00f3n de Alquiler de Coches: Una empresa de alquiler de coches cobra seg\u00fan los kil\u00f3metros recorridos. Calcula la factura final.</p> <ul> <li>10-100 Km: 2 \u20ac/Km.</li> <li>101-999 Km: 1.50 \u20ac/Km.</li> <li>&gt;= 1000 Km: 1 \u20ac/Km.</li> </ul> </li> <li> <p>(p, j) Sistema de Acceso Seguro: Crea un programa que gestione el acceso a un sistema mediante una contrase\u00f1a de 4 d\u00edgitos. Debe presentar un men\u00fa:</p> <ol> <li>Introducir contrase\u00f1a.</li> <li>Cambiar contrase\u00f1a (requiere la contrase\u00f1a antigua).</li> <li>Acceder al sistema (solo si la contrase\u00f1a es correcta).</li> <li>Salir.</li> </ol> </li> <li> <p>(df, j) Gestor de N\u00f3minas de Empresa: Dise\u00f1a un programa que calcule la n\u00f3mina de un empleado. Pide su nombre, categor\u00eda, a\u00f1o de ingreso y horas trabajadas. Debe mostrar un desglose del sueldo.</p> <ul> <li>Categor\u00edas y precio/hora: Administrativo (5\u20ac), T\u00e9cnico (7\u20ac), Profesional (12\u20ac), Operario (3\u20ac).</li> <li>Horas extra: Se pagan un 50% m\u00e1s.</li> <li>Antig\u00fcedad: Un % extra sobre el sueldo base (5% para 1-3 a\u00f1os, 10% para 4-6, etc.).</li> <li>Descuentos: 3% por obra social y 10% por jubilaci\u00f3n sobre el sueldo base.</li> </ul> </li> <li> <p>(p, j) Emulador de Calculadora Cient\u00edfica: Crea una calculadora con un men\u00fa para operaciones b\u00e1sicas (suma, resta, producto, divisi\u00f3n) y complejas (potencia, ra\u00edz cuadrada). El programa debe ser robusto y controlar posibles errores de entrada de datos.</p> </li> </ol>"},{"location":"ejercicios/ud02/ejercicios_ud02/#bloque-5-matrices","title":"Bloque 5: Matrices","text":"<ol> <li> <p>(j) Tablero Num\u00e9rico: Crea una matriz de 3x3 y rell\u00e9nala con los n\u00fameros del 1 al 9. Luego, mu\u00e9strala por pantalla en su formato de tabla.</p> </li> <li> <p>(j) Matriz Aleatoria: Pide al usuario el n\u00famero de columnas para una matriz de 5 filas. Rell\u00e9nala con n\u00fameros aleatorios entre 0 y 10 y mu\u00e9strala.</p> </li> <li> <p>(j) Suma de Matrices: Pide al usuario las dimensiones de dos matrices cuadradas (nxn). Luego, solicita todos los valores para ambas. Calcula la suma de las dos matrices y guarda el resultado en una tercera matriz. Muestra las tres matrices al final.</p> </li> <li> <p>(j) Analizador de Matrices: Crea un programa con un men\u00fa para analizar una matriz de 4x4:</p> <ul> <li>Rellenar Matriz: Pide al usuario todos los valores de la matriz. (Esta opci\u00f3n debe completarse primero).</li> <li>Suma de Fila: Pide un n\u00famero de fila y muestra la suma de sus elementos.</li> <li>Suma de Columna: Pide un n\u00famero de columna y muestra la suma de sus elementos.</li> <li>Suma Diagonal Principal: Suma los elementos donde el \u00edndice de fila y columna son iguales.</li> <li>Suma Diagonal Inversa: Suma los elementos de la diagonal secundaria.</li> <li>Media Total: Calcula la media de todos los valores de la matriz.</li> </ul> <p></p> </li> <li> <p>(j) Matriz sin Repeticiones: Genera una matriz de 3x3 con n\u00fameros aleatorios entre 1 y 9, asegur\u00e1ndote de que ning\u00fan n\u00famero se repita.</p> </li> <li> <p>(j) Simulador de M\u00e1quina Expendedora v2.0: Gestiona una m\u00e1quina de golosinas usando matrices.</p> <ul> <li>Usa una matriz para los nombres, otra para los precios y otra para las cantidades. Puedes usar estos datos de ejemplo para empezar: <pre><code>String[][] nombresGolosinas = {\n    {\"KitKat\", \"Chicles de fresa\", \"Lacasitos\", \"Palotes\"},\n    {\"Kinder Bueno\", \"Bolsa variada Haribo\", \"Chetoos\", \"Twix\"},\n    {\"Kinder Bueno\", \"M&amp;M'S\", \"Papa Delta\", \"Chicles de menta\"},\n    {\"Lacasitos\", \"Crunch\", \"Milkybar\", \"KitKat\"}\n};\n\ndouble[][] precios = {\n    {1.1, 0.8, 1.5, 0.9},\n    {1.8, 1, 1.2, 1},\n    {1.8, 1.3, 1.2, 0.8},\n    {1.5, 1.1, 1.1, 1.1}\n};\n\n// Podr\u00edas inicializar la cantidad de cada golosina a 5, por ejemplo.\nint[][] cantidades = new int[4][4];\n</code></pre></li> <li>Men\u00fa de opciones:<ol> <li>Pedir Golosina: El usuario introduce un c\u00f3digo de dos d\u00edgitos (fila y columna). Si hay stock y tiene dinero suficiente, se realiza la venta.</li> <li>Mostrar Golosinas: Muestra el c\u00f3digo, nombre y precio de todos los productos.</li> <li>Rellenar Golosinas (T\u00e9cnico): Pide una contrase\u00f1a. Si es correcta, permite aumentar el stock de una golosina.</li> <li>Apagar M\u00e1quina: Muestra las ventas totales y termina el programa.</li> </ol> </li> </ul> </li> </ol>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/","title":"Bolet\u00edn de Ejercicios: Bucles y Condicionales","text":"<p>Este bolet\u00edn de ejercicios est\u00e1 dise\u00f1ado para trabajar y evaluar los siguientes Resultados de Aprendizaje (RAs) del m\u00f3dulo de Programaci\u00f3n:</p> <ul> <li>RA2, RA3, RA5 y RA6</li> <li>Escribe y depura c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje.</li> <li>Desarrolla programas aplicando la programaci\u00f3n estructurada e introduciendo el tratamiento de datos.</li> </ul>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#1-el-control-de-acceso-a-la-discoteca","title":"1. El Control de Acceso a la Discoteca","text":"<p>Reto: Programa un sistema que pida la edad al usuario. Si es mayor o igual a 18 a\u00f1os, debe mostrar un mensaje de \"Puedes pasar\". Si tiene entre 16 y 17 a\u00f1os, puede pasar pero solo a la sesi\u00f3n \"light\". Si es menor de 16, no puede pasar.</p> <p>Conceptos: Estructura <code>if-else if-else</code>.</p>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#2-la-cuenta-atras-para-el-lanzamiento","title":"2. La Cuenta Atr\u00e1s para el Lanzamiento","text":"<p>Reto: Crea un programa que simule la cuenta atr\u00e1s para el lanzamiento de un cohete. Debe mostrar por pantalla los n\u00fameros del 10 al 1 y, al final, la palabra \"\u00a1Despegue!\".</p> <p>Conceptos: Bucle <code>for</code>.</p>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#3-el-validador-de-contrasenas","title":"3. El Validador de Contrase\u00f1as","text":"<p>Reto: Escribe un programa que pida al usuario una contrase\u00f1a. La contrase\u00f1a correcta es \"programacion101\". El programa debe seguir pidiendo la contrase\u00f1a hasta que el usuario la acierte. Cuando lo haga, mostrar\u00e1 un mensaje de \"Acceso concedido\".</p> <p>Conceptos: Bucle <code>while</code>, comparaci\u00f3n de <code>String</code>.</p>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#4-el-menu-del-guerrero","title":"4. El Men\u00fa del Guerrero","text":"<p>Reto: Est\u00e1s dise\u00f1ando un videojuego. Crea un men\u00fa que le pregunte al personaje qu\u00e9 acci\u00f3n desea realizar, usando un <code>switch</code>.</p> <ol> <li>Atacar</li> <li>Defender</li> <li>Usar Poci\u00f3n</li> <li>Salir del juego</li> </ol> <p>El programa debe mostrar un mensaje diferente para cada opci\u00f3n elegida. Si se elige una opci\u00f3n no v\u00e1lida, debe indicarlo.</p> <p>Conceptos: Estructura <code>switch</code>.</p>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#5-calculadora-de-promedios","title":"5. Calculadora de Promedios","text":"<p>Reto: Un profesor necesita una herramienta para calcular la nota media de su clase. El programa debe preguntar primero cu\u00e1ntos alumnos hay. Luego, usando un bucle, debe pedir la nota de cada uno de ellos y, al final, mostrar la nota media de la clase.</p> <p>Conceptos: Bucle <code>for</code>, <code>acumulador</code> para la suma total y <code>contador</code> (impl\u00edcito en el bucle).</p>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#6-jugamos-otra-vez","title":"6. \u00bfJugamos Otra Vez?","text":"<p>Reto: Crea un programa que pida dos n\u00fameros al usuario y muestre su suma. Despu\u00e9s de mostrar el resultado, debe preguntar: \"\u00bfDeseas realizar otra suma? (s/n)\". El programa se repetir\u00e1 mientras el usuario responda 's' o 'S'.</p> <p>Conceptos: Bucle <code>do-while</code>, ya que la primera suma se realiza siempre.</p>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#7-el-dibujante-de-cuadrados","title":"7. El Dibujante de Cuadrados","text":"<p>Reto: Pide al usuario un n\u00famero entero. El programa debe dibujar un cuadrado de asteriscos (<code>*</code>) de ese tama\u00f1o. Por ejemplo, si el usuario introduce 4, la salida debe ser:</p> <pre><code>* * * *\n* * * *\n* * * *\n* * * *\n</code></pre> <p>Conceptos: Bucles for anidados.</p>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#8-la-secuencia-fizzbuzz","title":"8. La Secuencia FizzBuzz","text":"<p>Reto: Pide al usuario un n\u00famero entero. El programa debe mostrar la secuencia de n\u00fameros desde 1 hasta el n\u00famero introducido, pero con una regla: si un n\u00famero es m\u00faltiplo de 3, en su lugar se escribe \"Fizz\"; si es m\u00faltiplo de 5, se escribe \"Buzz\"; y si es m\u00faltiplo de ambos (3 y 5), se escribe \"FizzBuzz\".</p> <p>Conceptos: Bucle <code>for, if-else if-else</code>, operador m\u00f3dulo (<code>%</code>).</p>"},{"location":"ejercicios/ud02/ejercicios_ud02_bucles/#9-el-cajero-automatico-interactivo","title":"9. El Cajero Autom\u00e1tico Interactivo","text":"<p>Reto: Simula un cajero autom\u00e1tico con un saldo inicial de 1000\u20ac. El programa mostrar\u00e1 un men\u00fa y se repetir\u00e1 hasta que el usuario elija \"Salir\".</p> <ol> <li> <p>Ingresar dinero: Pide una cantidad y la suma al saldo.</p> </li> <li> <p>Retirar dinero: Pide una cantidad. Si hay saldo suficiente, la resta. Si no, muestra un mensaje de error.</p> </li> <li> <p>Consultar saldo: Muestra el saldo actual.</p> </li> <li> <p>Salir.</p> </li> </ol> <p>Conceptos: Bucle <code>do-while</code> para el men\u00fa, <code>switch</code> para las opciones, <code>if-else</code> para la validaci\u00f3n del saldo.</p>"},{"location":"ejercicios/ud02/entregable_ud02/","title":"Actividades Entregables de la Unidad 2: Programaci\u00f3n estructurada","text":"<p>Resultados de Aprendizaje (RAs) Trabajados:</p> <p>Este conjunto de actividades est\u00e1 dise\u00f1ado para afianzar los siguientes RAs del m\u00f3dulo de Programaci\u00f3n:</p> <ul> <li>RA2, RA3, RA5 y RA6</li> <li>Escribe y depura c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje. (Aplicado en el uso de <code>if-else</code>, <code>switch</code>, <code>for</code>, <code>while</code> y <code>do-while</code> para controlar el flujo de los programas).</li> <li>Desarrolla programas aplicando la programaci\u00f3n estructurada e introduciendo el tratamiento de datos. (Aplicado en el uso de arrays y matrices para almacenar y gestionar colecciones de datos como notas, precios o butacas).</li> </ul> <p>Objetivo General: Aplicar los conocimientos sobre variables, condicionales, bucles y arrays (vectores y matrices) para resolver problemas pr\u00e1cticos y estructurados.</p>"},{"location":"ejercicios/ud02/entregable_ud02/#actividad-1-la-cooperativa-de-naranjas","title":"Actividad 1: La Cooperativa de Naranjas","text":"<p>La cooperativa de naranjas \"Casablanca\" necesita un programa para calcular el precio final por kilo de naranja en el momento de la venta. Este precio final depende de un precio inicial y se ajusta seg\u00fan el tipo (A o B) y el tama\u00f1o (1 o 2) de la naranja.</p> <p>Tu misi\u00f3n es escribir un programa que determine cu\u00e1nto recibir\u00e1 un productor por cada kilo de naranja, aplicando las siguientes reglas:</p> <ul> <li>Si es de tipo A:<ul> <li>Se suman 10 c\u00e9ntimos al precio si es de tama\u00f1o 1.</li> <li>Se suman 25 c\u00e9ntimos al precio si es de tama\u00f1o 2.</li> </ul> </li> <li>Si es de tipo B:<ul> <li>Se restan 5 c\u00e9ntimos al precio si es de tama\u00f1o 1.</li> <li>Se restan 10 c\u00e9ntimos al precio si es de tama\u00f1o 2.</li> </ul> </li> </ul> <p>El programa debe solicitar el precio inicial, el tipo y el tama\u00f1o para realizar el c\u00e1lculo.</p> <p>#Pista: Este problema es ideal para resolverlo con una estructura <code>if-else if</code> o con un <code>switch</code> anidado.</p>"},{"location":"ejercicios/ud02/entregable_ud02/#ejemplo-de-salida","title":"Ejemplo de Salida","text":"<pre><code>--- COOPERATIVA CASABLANCA: CALCULADORA DE PRECIOS ---\nIntroduce los siguientes datos: \n- Precio inicial del kilo de naranja:\n0.30\n- Tipo de naranja (A/B):\nA\n- Tama\u00f1o de naranja (1/2):\n2\n--- RESULTADO ---\nEl precio final de venta es 0.55 \u20ac/kg\n</code></pre>"},{"location":"ejercicios/ud02/entregable_ud02/#entrega-actividad-1","title":"Entrega Actividad 1","text":"<ul> <li>Genera un fichero Java con el nombre <code>ud2_actividad1_[tu_nombre].java</code>. Por ejemplo, en mi caso, <code>ud2_actividad1_jose_abad.java</code>.</li> </ul>"},{"location":"ejercicios/ud02/entregable_ud02/#actividad-2-analisis-de-facturacion","title":"Actividad 2: An\u00e1lisis de Facturaci\u00f3n","text":"<p>Una empresa que vende desinfectantes necesita un programa para analizar r\u00e1pidamente sus ventas. En cada factura figura el c\u00f3digo del art\u00edculo, la cantidad vendida en litros y el precio por litro.</p> <p>El programa debe procesar la informaci\u00f3n de 5 facturas (que se pedir\u00e1n por teclado) y, al final, mostrar un resumen con los siguientes datos:</p> <ol> <li>Facturaci\u00f3n total: La suma de los importes de todas las facturas.</li> <li>Litros del Art\u00edculo 1: La cantidad total de litros vendidos espec\u00edficamente para el art\u00edculo con c\u00f3digo 1.</li> <li>Facturas Superiores a 200\u20ac: El n\u00famero de facturas cuyo importe total super\u00f3 los 200 \u20ac.</li> </ol> <p>#Pista: Necesitar\u00e1s un bucle que se repita 5 veces. Dentro del bucle, pide los datos de cada factura y actualiza tus variables acumuladoras y contadoras. Piensa \u00bfcu\u00e1ntos arrays necesitas para almacenar la informaci\u00f3n?</p>"},{"location":"ejercicios/ud02/entregable_ud02/#ejemplo-de-entrada-y-salida","title":"Ejemplo de Entrada y Salida","text":"<pre><code>// El usuario introducir\u00e1 estos datos\n--- EJEMPLO DE ENTRADA ---\n- C\u00f3digo: 1, Litros: 30, Precio/L: 4.5\n- C\u00f3digo: 2, Litros: 20, Precio/L: 5.0\n- C\u00f3digo: 1, Litros: 50, Precio/L: 4.5\n- C\u00f3digo: 3, Litros: 10, Precio/L: 5.8\n- C\u00f3digo: 3, Litros: 20, Precio/L: 5.8\n\n// El programa mostrar\u00e1 el Resumen de Ventas\n--- RESUMEN DE VENTAS ---\n* Facturaci\u00f3n total: 634.00 \u20ac\n* Cantidad de litros vendidos del art\u00edculo #1: 80\n* N\u00famero de facturas de m\u00e1s de 200 \u20ac: 1\n</code></pre>"},{"location":"ejercicios/ud02/entregable_ud02/#entrega-actividad-2","title":"Entrega Actividad 2","text":"<ul> <li>Genera un fichero Java con el nombre <code>ud2_actividad2_[tu_nombre].java</code>. Por ejemplo, en mi caso, <code>ud2_actividad2_jose_abad.java</code>.</li> </ul>"},{"location":"ejercicios/ud02/entregable_ud02/#actividad-3-simulador-de-cajero-automatico","title":"Actividad 3: Simulador de Cajero Autom\u00e1tico","text":"<p>\u00a1Vamos a programar el software de un cajero autom\u00e1tico! El cajero debe permitir a los usuarios consultar su saldo, ingresar y retirar dinero.</p> <p>El programa debe cumplir los siguientes requisitos:</p> <ol> <li>El cajero dispone de billetes de <code>500, 200, 100, 50, 20, 10 y 5</code> euros. Guarda estas denominaciones en un array de enteros.</li> <li>El saldo inicial del usuario ser\u00e1 de <code>0</code>.</li> <li>El programa mostrar\u00e1 un men\u00fa repetitivo con las siguientes opciones:<ul> <li>Consultar saldo actual.</li> <li>Ingresar dinero (pide una cantidad y la suma al saldo).</li> <li>Retirar dinero.</li> <li>Salir.</li> </ul> </li> <li>La opci\u00f3n \"Retirar dinero\" es la m\u00e1s compleja:<ul> <li>Debe comprobar si hay saldo suficiente. Si no lo hay, mostrar\u00e1 un mensaje de error.</li> <li>Si hay saldo, debe calcular el menor n\u00famero posible de billetes para entregar la cantidad solicitada.</li> <li>Finalmente, debe mostrar cu\u00e1ntos billetes de cada tipo entrega.</li> </ul> </li> </ol>"},{"location":"ejercicios/ud02/entregable_ud02/#ejemplo-de-ejecucion","title":"Ejemplo de Ejecuci\u00f3n","text":"<pre><code>---- MEN\u00da CAJERO AUTOM\u00c1TICO ----\n1. Consultar saldo\n2. Ingresar dinero\n3. Retirar dinero\n4. Salir\nElige una opci\u00f3n: 2\nCantidad a ingresar: 385\nSaldo actual: 385.0 \u20ac\n\n---- MEN\u00da CAJERO AUTOM\u00c1TICO ----\n1. Consultar saldo\n2. Ingresar dinero\n3. Retirar dinero\n4. Salir\nElige una opci\u00f3n: 3\nCantidad a retirar: 280\nDesglose de billetes entregados:\n- 1 billete de 200\u20ac\n- 1 billete de 50\u20ac\n- 1 billete de 20\u20ac\n- 1 billete de 10\u20ac\nOperaci\u00f3n realizada con \u00e9xito.\nSaldo actual: 105.0 \u20ac\n</code></pre>"},{"location":"ejercicios/ud02/entregable_ud02/#entrega-actividad-3","title":"Entrega Actividad 3","text":"<ul> <li>Genera un fichero Java con el nombre <code>ud2_actividad3_[tu_nombre].java</code>. Por ejemplo, en mi caso, <code>ud2_actividad3_jose_abad.java</code>.</li> </ul>"},{"location":"ejercicios/ud02/entregable_ud02/#actividad-4-gestor-de-butacas-de-cine","title":"Actividad 4: Gestor de Butacas de Cine","text":"<p>\u00a1Has sido contratado para programar el sistema de venta de entradas de un peque\u00f1o cine! La sala de cine se representar\u00e1 como una matriz de caracteres, donde cada posici\u00f3n es una butaca.</p> <p>El programa debe realizar lo siguiente:</p> <ol> <li>Al iniciarse, crea una matriz de 5 filas por 5 columnas para representar la sala.</li> <li>Inicializa todas las butacas con el car\u00e1cter <code>'L'</code> (Libre).</li> <li>Muestra un men\u00fa repetitivo con las siguientes opciones:<ol> <li>Mostrar butacas: Dibuja en la consola el estado actual de la sala, mostrando las filas y columnas y el car\u00e1cter de cada butaca (<code>L</code> o <code>O</code> de Ocupada).</li> <li>Comprar entrada: Pide al usuario la fila y la columna de la butaca que desea.<ul> <li>Si la butaca est\u00e1 libre (<code>L</code>), la cambia a ocupada (<code>O</code>) y muestra un mensaje de \"Compra realizada\".</li> <li>Si la butaca ya est\u00e1 ocupada (<code>O</code>), debe mostrar un mensaje de \"Butaca no disponible\".</li> <li>Debe validar que la fila y columna introducidas sean correctas.</li> </ul> </li> <li>Mostrar estad\u00edsticas: Calcula y muestra el n\u00famero de butacas libres, el n\u00famero de butacas ocupadas y el total recaudado (suponiendo que cada entrada cuesta 5\u20ac).</li> <li>Salir.</li> </ol> </li> </ol>"},{"location":"ejercicios/ud02/entregable_ud02/#ejemplo-de-salida_1","title":"Ejemplo de Salida","text":"<pre><code>---- CINE DAM ----\n1. Mostrar butacas\n2. Comprar entrada\n3. Ver estad\u00edsticas\n4. Salir\nElige una opci\u00f3n: 1\n\n  Asientos:\n  0 1 2 3 4\n0 L L L L L \n1 L L L L L \n2 L L L L L \n3 L L L L L \n4 L L L L L \n\n---- CINE DAM ----\n1. Mostrar butacas\n2. Comprar entrada\n3. Ver estad\u00edsticas\n4. Salir\nElige una opci\u00f3n: 2\n\nIntroduce la fila (0-4): 2\nIntroduce la columna (0-4): 3\nCompra realizada con \u00e9xito.\n\n---- CINE DAM ----\n1. Mostrar butacas\n2. Comprar entrada\n3. Ver estad\u00edsticas\n4. Salir\nElige una opci\u00f3n: 1\n\n  Asientos:\n  0 1 2 3 4\n0 L L L L L \n1 L L L L L \n2 L L L O L \n3 L L L L L \n4 L L L L L \n\nElige una opci\u00f3n: 3\n--- ESTAD\u00cdSTICAS ---\nButacas Ocupadas: 1\nButacas Libres: 24\nTotal Recaudado: 5.0 \u20ac\n</code></pre>"},{"location":"ejercicios/ud02/entregable_ud02/#entrega-actividad-4","title":"Entrega Actividad 4","text":"<ul> <li>Genera un fichero Java con el nombre <code>ud2_actividad4_[tu_nombre].java</code>. Por ejemplo, en mi caso, <code>ud2_actividad4_jose_abad.java</code>.</li> </ul>"},{"location":"ejercicios/ud03/ejercicios_ud03_inicio/","title":"Ejercicios de la Unidad 3","text":"Fecha Versi\u00f3n Descripci\u00f3n 19/09/2021 1.0.0 Versi\u00f3n inicial"},{"location":"ejercicios/ud03/ejercicios_ud03_inicio/#1-iniciacion","title":"1 Iniciaci\u00f3n","text":"<p>\u26a1 Ninguna funci\u00f3n mostrar\u00e1 nada por pantalla a no ser que se diga lo contrario.</p> <ol> <li>Escribe un programa que pida dos n\u00fameros reales por teclado y muestre por pantalla el resultado de multiplicarlos. Implementa y utiliza la funci\u00f3n:</li> </ol> <pre><code>double multiplica(double a, double b) // Devuelve la multiplicaci\u00f3n de dos n\u00fameros\n</code></pre> <ol> <li>Escribe un programa que pida la edad por teclado y muestre por pantalla si eres mayor de edad o no. Implementa y utiliza la funci\u00f3n:</li> </ol> <pre><code>boolean esMayorEdad(int a) // Devuelve verdadero si a&gt;=18, falso en caso contrario\n</code></pre> <ol> <li>Escribe un programa que pida dos n\u00fameros enteros por teclado y muestre por pantalla cual es el m\u00ednimo. Implementa y utiliza la funci\u00f3n:</li> </ol> <pre><code>int minimo(int a, int b) // Devuelve el menor entre a y b\n</code></pre> <ol> <li>Escribe un programa que pida un n\u00famero entero por teclado y muestre por pantalla si es positivo, negativo o cero. Implementa y utiliza la funci\u00f3n:</li> </ol> <pre><code>int dimeSigno(int a) // Devuelve -1 si es negativo, 0 si es igual a 0, 1 si es positivo\n</code></pre> <ol> <li>Escribe un programa que pida un valor entero en millas y muestre su equivalente en kil\u00f3metros. Recuerda que una milla son 1,60934 kil\u00f3metros. Implementa y utiliza la funci\u00f3n:</li> </ol> <pre><code>double millas_a_kilometros(int millas) // Devuelve la conversi\u00f3n de millas a kil\u00f3metros\n</code></pre> <ol> <li>Escribe un programa que pida cinco precios y muestre por pantalla el precio de venta de cada uno tras aplicarle un 21% de IVA. Implementa y utiliza la funci\u00f3n:</li> </ol> <pre><code>double precioConIVA(double precio) // Devuelve el precio tras sumarle un 21% de IVA\n</code></pre> <ol> <li>Escribe un programa que pida el ancho y alto de un rect\u00e1ngulo y muestre por pantalla su \u00e1rea y su per\u00edmetro. Implementa y utiliza las funciones:</li> </ol> <pre><code>double perimetroRectangulo(double ancho, double alto) // Devuelve el per\u00edmetro\ndouble areaRectangulo(double ancho, double alto) // Devuelve el \u00e1rea\n</code></pre> <ol> <li>Escribe un programa que pida un valor N entero y luego muestre: el sumatorio des 1 a N, el productorio de 1 a N y el valor intermedio entre 1 y N. Implementa y utiliza las funciones:</li> </ol> <pre><code>int suma1aN(int n) // Devuelve la suma de enteros de 1 a n\nint producto1aN(int n) // Devuelve el producto de enteros de 1 a n\ndouble intermedio1aN(int n) // Devuelve el valor intermedio entre 1 y n\n</code></pre>"},{"location":"ejercicios/ud03/ejercicios_ud03_inicio/#2-intermedio","title":"2. Intermedio","text":"<ol> <li> <p>Realiza un programa que pida introducir tres valores enteros y nos diga cu\u00e1l de ellos es el m\u00e1s elevado. Implem\u00e9ntalo creando \u00fanicamente una funci\u00f3n a la que le pasemos dos valores (no tres) y nos devuelva el m\u00e1ximo de los dos valores.</p> </li> <li> <p>Realiza un programa que lea una fecha introduciendo el d\u00eda, mes y a\u00f1o por separado y nos diga si la fecha es correcta o no. Supondremos que todos los meses tienen 30 d\u00edas. Se debe crear una funci\u00f3n donde le pasemos los datos y devuelva si es correcta o no.</p> </li> <li> <p>Realiza un programa que escriba la tabla de multiplicar de un n\u00famero introducido por teclado. Para ello implementa una funci\u00f3n que reciba como par\u00e1metro un n\u00famero entero y muestre por pantalla la tabla de multiplicar de dicho n\u00famero.</p> </li> <li> <p>Realiza un programa que dado un valor en kil\u00f3metros nos lo traduce a millas. El programa debe tener una funci\u00f3n que reciba como par\u00e1metro una cantidad en kil\u00f3metros y nos la devuelva en millas.</p> </li> <li> <p>Realiza un programa que calcule el porcentaje de descuento que nos han hecho al comprar algo. Se debe solicitar la cantidad sin descuento y la cantidad con el descuento aplicado. Se debe crear una funci\u00f3n a la que le pasemos ambos valores y nos devuelva el descuento.</p> </li> <li> <p>Escribe una funci\u00f3n que muestre por pantalla un tri\u00e1ngulo como el del ejemplo. Deber\u00e1 recibir dos par\u00e1metros: el car\u00e1cter que se desea imprimir y el n\u00famero de l\u00edneas del tri\u00e1ngulo.</p> </li> </ol> <p></p> <ol> <li> <p>Escribe un programa que cree un array de tama\u00f1o 100 con los primeros 100 n\u00fameros naturales. Luego muestra la suma total y la media. Implementa una funci\u00f3n que calcule la suma de un array y otra que calcule la media de un array.</p> </li> <li> <p>Escribe un programa que cree un array del tama\u00f1o indicado por teclado y luego lo rellene con valores aleatorios (utiliza Math.random()). Implementa la funci\u00f3n que rellena un array con valores aleatorios.</p> </li> </ol>"},{"location":"ejercicios/ud03/ejercicios_ud03_inicio/#3-avanzado","title":"3. Avanzado","text":"<ol> <li> <p>Realiza un programa que nos pida n\u00famero enteros positivos hasta que se introduzca el 0, dici\u00e9ndonos, para cada n\u00famero introducido si es primo o no. Hay que recordar que un n\u00famero es primo si es divisible por si mismo y por 1. El 1 no es primo por convenio. Se debe crear una funci\u00f3n que pas\u00e1ndole un n\u00famero entero devuelva si es primo o no.</p> </li> <li> <p>El NIF (o letra asociada a un DNI) se obtiene de la siguiente manera:</p> <ul> <li>Se divide el n\u00famero de DNI entre 23 y el resto es codificado por una letra seg\u00fan la siguiente equivalencia:    0: \"T\", 1: \"R\", 2: \"W\", 3: \"A\", 4: \"G\", 5: \"M\", 6: \"Y\", 7: \"F\", 8: \"P\", 9: \"D\",10:\"X\", 11: \"B\", 12: \"N\",    13: \"J\", 14: \"Z\", 15: \"S\", 16: \"Q\", 17: \"V\", 18: \"H\", 19: \"L\", 20: \"C\", 21: \"K\", 22: \"E\".</li> <li>Escribe un programa que pida el DNI y muestre por pantalla la letra asociada. Para ello se deber\u00e1 crear una funci\u00f3n a la que se le pase el n\u00famero y devuelva la letra. Ejemplo: para el DNI 56321122 el NIF es \u2018X\u2019.</li> </ul> </li> <li> <p>Realiza un programa que permita comprobar si una terna de valores enteros (3 valores) se ajusta a la ecuaci\u00f3n de Pit\u00e1goras: x \u00b2 + y \u00b2 = z \u00b2. El programa solicita al usuario los valores x, y, z. Se deber\u00e1 crear una funci\u00f3n a la que se le pase x, y, z y devuelva si son iguales o no.</p> </li> </ol> <p>Por ejemplo: 3 \u00b2 + 4 \u00b2 = 5 \u00b2.</p> <ol> <li> <p>Escribe un programa que imprima las tablas de multiplicar. Implementa una funci\u00f3n que reciba un n\u00famero entero como par\u00e1metro e imprima su tabla de multiplicar.</p> </li> <li> <p>Escribe un programa que muestre un men\u00fa con 2 opciones: \u201c1.Circunferencia\u201d y \u201c2.\u00c1rea\u201d. En ambas se le pedir\u00e1 al usuario que introduzca un radio y luego se le mostrar\u00e1 el c\u00e1lculo oportuno. Implementa las funciones:</p> </li> </ol> <pre><code>int menu() // Muestra el men\u00fa y devuelve el n\u00famero elegido\ndouble pideRadio() // Pide que se introduzca el radio y lo devuelve\ndouble circunferencia(double r) // Calcula la circunferencia y la devuelve\ndouble area(double r) // Calcula el \u00e1rea y la devuelve\n</code></pre> <p>Modifica el programa a\u00f1adiendo otra opci\u00f3n llamada \u201cVolumen\u201d, permitiendo que el usuario tambi\u00e9n pueda solicitar el c\u00e1lculo del volumen. A\u00f1ade la funci\u00f3n:</p> <pre><code>double volumen(double r) // Calcula el volumen y lo devuelve\n</code></pre> <p>Modifica el programa a\u00f1adiendo otra opci\u00f3n llamada \u201cTodas\u201d en la que se pida el radio una sola vez y se muestren los tres c\u00e1lculos posibles (circunferencia, \u00e1rea y volumen).</p> <p>Modifica el programa anterior de modo que el proceso se repita una y otra vez (mostrar men\u00fa -&gt; realizar el c\u00e1lculo -&gt; volver a mostrar men\u00fa). A\u00f1ade una opci\u00f3n m\u00e1s llamada \u201cSalir\u201d que terminar\u00e1 el programa si es elegida.</p>"},{"location":"recursos/algoritmica_basica/","title":"Algor\u00edtmica B\u00e1sica: T\u00e9cnicas Fundamentales","text":"<p>Este documento complementa las Unidades 2 y 3, profundizando en patrones algor\u00edtmicos esenciales que todo programador debe dominar. Son las piezas de LEGO b\u00e1sicas con las que construir\u00e1s soluciones m\u00e1s complejas.</p>"},{"location":"recursos/algoritmica_basica/#1-intercambio-de-variables-el-swap","title":"1. Intercambio de Variables (El \"Swap\")","text":"<p>El Problema: \u00bfC\u00f3mo intercambiar el valor de dos variables? Si tienes <code>a = 5</code> y <code>b = 10</code>, \u00bfc\u00f3mo consigues que <code>a</code> valga 10 y <code>b</code> valga 5?</p> <p>La Soluci\u00f3n Cl\u00e1sica: Necesitas una \"caja\" auxiliar temporal para no perder uno de los valores durante el intercambio.</p> <p>Algoritmo:</p> <ol> <li>Guarda el valor de <code>a</code> en una variable temporal <code>aux</code>.</li> <li>Asigna el valor de <code>b</code> a <code>a</code>. (Ahora <code>a</code> tiene el valor original de <code>b</code>).</li> <li>Asigna el valor guardado en <code>aux</code> (el valor original de <code>a</code>) a <code>b</code>.</li> </ol> <p>Ejemplo en Java:</p> <pre><code>public class IntercambioVariables {\n    public static void main(String[] args) {\n        int a = 5;\n        int b = 10;\n        int aux; // Nuestra \"caja\" auxiliar\n\n        System.out.println(\"Valores iniciales:\");\n        System.out.println(\"a = \" + a); // 5\n        System.out.println(\"b = \" + b); // 10\n\n        // 1. Guardamos 'a'\n        aux = a;\n\n        // 2. 'a' toma el valor de 'b'\n        a = b;\n\n        // 3. 'b' toma el valor guardado en 'aux'\n        b = aux;\n\n        System.out.println(\"\\nValores finales:\");\n        System.out.println(\"a = \" + a); // 10\n        System.out.println(\"b = \" + b); // 5\n    }\n}\n</code></pre>"},{"location":"recursos/algoritmica_basica/#2-busqueda-de-elementos-en-un-array","title":"2. B\u00fasqueda de Elementos en un Array","text":"<p>Es muy com\u00fan necesitar encontrar informaci\u00f3n dentro de una colecci\u00f3n de datos (un array). Veamos las b\u00fasquedas m\u00e1s t\u00edpicas.</p>"},{"location":"recursos/algoritmica_basica/#21-busqueda-del-maximo-y-minimo","title":"2.1. B\u00fasqueda del M\u00e1ximo y M\u00ednimo","text":"<p>El Problema: Dado un array de n\u00fameros, \u00bfc\u00f3mo encontrar el valor m\u00e1s grande (m\u00e1ximo) o el m\u00e1s peque\u00f1o (m\u00ednimo)?</p> <p>Algoritmo (para el m\u00e1ximo):</p> <ol> <li>Sup\u00f3n que el primer elemento del array es el m\u00e1ximo (<code>max = array[0]</code>).</li> <li>Recorre el resto del array (desde el segundo elemento).</li> <li>En cada paso, compara el elemento actual con tu <code>max</code> actual.</li> <li>Si el elemento actual es mayor que <code>max</code>, actualiza <code>max</code> con ese valor.</li> <li>Al final del recorrido, <code>max</code> contendr\u00e1 el valor m\u00e1s grande.    (El algoritmo para el m\u00ednimo es id\u00e9ntico, pero comparando si el elemento actual es menor que <code>min</code>).</li> </ol> <p>Ejemplo en Java (B\u00fasqueda del M\u00e1ximo):</p> <pre><code>public class BusquedaMaximo {\n    public static void main(String[] args) {\n        int[] numeros = {12, 5, 23, 8, 19, 3, 15};\n\n        int maximo = numeros[0]; // 1. Suponemos que el primero es el m\u00e1ximo\n\n        // 2. Recorremos desde el segundo elemento\n        for (int i = 1; i &lt; numeros.length; i++) {\n            // 3. Comparamos\n            if (numeros[i] &gt; maximo) {\n                // 4. Actualizamos si encontramos uno mayor\n                maximo = numeros[i];\n            }\n        }\n\n        // 5. Mostramos el resultado\n        System.out.println(\"El n\u00famero m\u00e1ximo en el array es: \" + maximo); // 23\n    }\n}\n</code></pre>"},{"location":"recursos/algoritmica_basica/#22-busqueda-de-un-elemento-especifico-busqueda-lineal","title":"2.2. B\u00fasqueda de un Elemento Espec\u00edfico (B\u00fasqueda Lineal)","text":"<p>El Problema: \u00bfC\u00f3mo saber si un valor concreto existe dentro de un array y, si existe, en qu\u00e9 posici\u00f3n se encuentra?</p> <p>Algoritmo (B\u00fasqueda Lineal):</p> <ol> <li>Recorre el array elemento por elemento, desde el principio.</li> <li>En cada paso, compara el elemento actual con el valor que buscas.</li> <li>Si coinciden, \u00a1lo has encontrado! Puedes devolver la posici\u00f3n (<code>i</code>) o simplemente un indicador (<code>true</code>).</li> <li>Si llegas al final del array sin encontrarlo, significa que no est\u00e1. Puedes devolver un valor especial (como <code>-1</code> si buscabas la posici\u00f3n) o <code>false</code>.</li> </ol> <p>Ejemplo en Java (Encontrar la posici\u00f3n):</p> <pre><code>public class BusquedaLineal {\n    public static void main(String[] args) {\n        String[] frutas = {\"Manzana\", \"Pera\", \"Naranja\", \"Pl\u00e1tano\", \"Fresa\"};\n        String frutaBuscada = \"Naranja\";\n        int posicionEncontrada = -1; // -1 indica \"no encontrado\"\n\n        // 1. Recorremos el array\n        for (int i = 0; i &lt; frutas.length; i++) {\n            // 2. Comparamos (\u00a1OJO! Strings se comparan con .equals())\n            if (frutas[i].equals(frutaBuscada)) {\n                // 3. \u00a1Encontrado! Guardamos la posici\u00f3n y salimos del bucle\n                posicionEncontrada = i;\n                break; // No hace falta seguir buscando\n            }\n        }\n\n        // 4. Mostramos el resultado\n        if (posicionEncontrada != -1) {\n            System.out.println(frutaBuscada + \" encontrada en la posici\u00f3n: \" + posicionEncontrada); // Naranja encontrada en la posici\u00f3n: 2\n        } else {\n            System.out.println(frutaBuscada + \" no se encuentra en el array.\");\n        }\n    }\n}\n</code></pre>"},{"location":"recursos/algoritmica_basica/#3-recorridos-de-bucles-mas-alla-del-basico-for","title":"3. Recorridos de Bucles: M\u00e1s All\u00e1 del B\u00e1sico <code>for</code>","text":"<p>El bucle <code>for</code> es muy potente. No solo sirve para ir de 0 hasta N. Podemos controlar el inicio, el fin, la direcci\u00f3n y el tama\u00f1o del \"salto\" en cada iteraci\u00f3n.</p>"},{"location":"recursos/algoritmica_basica/#31-recorrido-inverso","title":"3.1. Recorrido Inverso","text":"<p>La T\u00e9cnica: \u00bfY si necesitas procesar un array desde el \u00faltimo elemento hasta el primero? Simplemente, inicializa el contador del <code>for</code> en el \u00faltimo \u00edndice (<code>array.length - 1</code>), pon la condici\u00f3n para que contin\u00fae mientras sea mayor o igual a 0, y usa el decremento (<code>i--</code>).</p> <p>Ejemplo en Java:</p> <pre><code>public class RecorridoInverso {\n    public static void main(String[] args) {\n        char[] letras = {'P', 'R', 'O', 'G', 'R', 'A', 'M', 'A'};\n\n        System.out.println(\"Recorrido inverso:\");\n        // Inicializamos en el \u00faltimo \u00edndice\n        for (int i = letras.length - 1; i &gt;= 0; i--) {\n            System.out.print(letras[i] + \" \"); // A M A R G O R P\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"recursos/algoritmica_basica/#32-recorrido-con-saltos-intervalos","title":"3.2. Recorrido con Saltos (Intervalos)","text":"<p>La T\u00e9cnica: \u00bfNecesitas procesar solo los elementos en posiciones pares? \u00bfO avanzar de 3 en 3? Modifica la parte del incremento/decremento del <code>for</code>. En lugar de <code>i++</code> o <code>i--</code>, usa <code>i += 2</code>, <code>i += 3</code>, <code>i -= 5</code>, etc.</p> <p>Ejemplo en Java (Procesar \u00edndices pares y contar de 3 en 3):</p> <pre><code>public class RecorridoConSaltos {\n    public static void main(String[] args) {\n        int[] numeros = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n        System.out.println(\"Elementos en \u00edndices pares:\");\n        // Saltamos de 2 en 2\n        for (int i = 0; i &lt; numeros.length; i += 2) {\n            System.out.print(numeros[i] + \" \"); // 0 2 4 6 8 10\n        }\n        System.out.println();\n\n        System.out.println(\"\\nContando de 3 en 3 hasta 20:\");\n        // Saltamos de 3 en 3\n        for (int i = 0; i &lt;= 20; i += 3) {\n            System.out.print(i + \" \"); // 0 3 6 9 12 15 18\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"recursos/algoritmica_basica/#33-recorrido-parcial-de-un-array","title":"3.3. Recorrido Parcial de un Array","text":"<p>La T\u00e9cnica: No siempre necesitas recorrer un array completo. Puedes ajustar las condiciones de inicio y fin del bucle <code>for</code> para procesar solo una secci\u00f3n.</p> <p>Ejemplo en Java (Sumar solo la segunda mitad del array):</p> <pre><code>public class RecorridoParcial {\n    public static void main(String[] args) {\n        int[] valores = {10, 20, 30, 40, 50, 60, 70, 80};\n        int sumaSegundaMitad = 0;\n\n        // Calculamos d\u00f3nde empieza la segunda mitad\n        int inicioSegundaMitad = valores.length / 2;\n\n        System.out.println(\"Sumando la segunda mitad del array (\u00edndices \" + inicioSegundaMitad + \" a \" + (valores.length - 1) + \")\");\n\n        // Empezamos el bucle en la mitad\n        for (int i = inicioSegundaMitad; i &lt; valores.length; i++) {\n            sumaSegundaMitad += valores[i];\n        }\n\n        System.out.println(\"La suma de la segunda mitad es: \" + sumaSegundaMitad); // 50 + 60 + 70 + 80 = 260\n    }\n}\n</code></pre>"},{"location":"recursos/algoritmica_basica/#34-bucles-anidados-dependientes-patrones","title":"3.4. Bucles Anidados Dependientes (Patrones)","text":"<p>La T\u00e9cnica: A veces, el n\u00famero de veces que se ejecuta un bucle interior depende de la iteraci\u00f3n actual del bucle exterior. Esto es muy \u00fatil para crear patrones, como tri\u00e1ngulos.</p> <p>Ejemplo en Java (Dibujar un tri\u00e1ngulo de asteriscos):</p> <pre><code>public class TrianguloAsteriscos {\n    public static void main(String[] args) {\n        System.out.println(\"Dibujando un tri\u00e1ngulo:\");\n\n        // Bucle exterior: controla las filas (de 0 a 4, 5 filas en total)\n        for (int i = 0; i &lt; 5; i++) {\n            // Bucle interior: imprime asteriscos.\n            // El n\u00famero de asteriscos depende de la fila actual (i).\n            // Si i=0, j va de 0 a 0 (1 vez). Si i=1, j va de 0 a 1 (2 veces), etc.\n            for (int j = 0; j &lt;= i; j++) {\n                System.out.print(\"*\");\n            }\n            // Salto de l\u00ednea al final de cada fila\n            System.out.println();\n        }\n    }\n}\n</code></pre> <p>Salida:</p> <pre><code>Dibujando un tri\u00e1ngulo:\n*\n**\n***\n****\n*****\n</code></pre>"},{"location":"recursos/algoritmica_basica/#4-manipulacion-basica-de-strings","title":"4. Manipulaci\u00f3n B\u00e1sica de Strings","text":"<p>Los <code>String</code> son secuencias de caracteres y, aunque en Java son objetos, a menudo los tratamos algor\u00edtmicamente como si fueran arrays de caracteres. Dominar su manipulaci\u00f3n es crucial.</p>"},{"location":"recursos/algoritmica_basica/#41-comprobacion-de-palindromos-version-manual","title":"4.1. Comprobaci\u00f3n de Pal\u00edndromos (Versi\u00f3n Manual)","text":"<p>El Problema: Un pal\u00edndromo es una palabra o frase que se lee igual hacia adelante que hacia atr\u00e1s (ignorando espacios y may\u00fasculas/min\u00fasculas). Ejemplos: \"Ana\", \"oso\", \"Se van sus naves\". \u00bfC\u00f3mo comprobar si un <code>String</code> es un pal\u00edndromo usando solo m\u00e9todos b\u00e1sicos?</p> <p>Algoritmo:</p> <ol> <li>Limpiar y Normalizar:<ul> <li>Convierte el <code>String</code> original a min\u00fasculas (<code>toLowerCase()</code>).</li> <li>Recorre el <code>String</code> en min\u00fasculas car\u00e1cter a car\u00e1cter (<code>charAt()</code> y <code>length()</code>).</li> <li>Construye un nuevo <code>String</code> auxiliar (<code>limpio</code>) a\u00f1adiendo solo los caracteres que NO sean espacios en blanco.</li> </ul> </li> <li>Compararaci\u00f3n de caracteres:<ul> <li>Recorre el <code>String</code> <code>limpio</code> desde el inicio hasta la mitad (<code>limpio.length()/2</code>).</li> <li>Compara cada posici\u00f3n con su hom\u00f3logo inverso <code>limpio.length() - 1 - i</code>. Se detiene si los caracteres son diferentes.</li> </ul> </li> </ol> <p>Ejemplo en Java:</p> <pre><code>public class ComprobarPalindromo {\n\n    public static void main(String[] args) {\n        String frase1 = \"Se van sus naves\";\n        String frase2 = \"Java Mola\";\n\n        if (esPalindromo(frase1)) {\n            System.out.println(\"'\" + frase1 + \"' es un pal\u00edndromo.\");\n        } else {\n            System.out.println(\"'\" + frase1 + \"' NO es un pal\u00edndromo.\");\n        }\n\n        if (esPalindromo(frase2)) {\n            System.out.println(\"'\" + frase2 + \"' es un pal\u00edndromo.\");\n        } else {\n            System.out.println(\"'\" + frase2 + \"' NO es un pal\u00edndromo.\");\n        }\n    }\n\n    /**\n     * Funci\u00f3n que comprueba si un String es pal\u00edndromo manualmente.\n     * @param texto El String a comprobar.\n     * @return true si es pal\u00edndromo, false en caso contrario.\n     */\n    public static boolean esPalindromo(String texto) {\n\n        // 1. Limpiar y Normalizar (solo quitamos espacios)\n        String textoEnMinusculas = texto.toLowerCase().trim();\n        String limpio = \"\"; // String auxiliar para construir el texto sin espacios\n        boolean esPalindromo = true;\n        char aux;\n\n        for (int i = 0; i &lt; textoEnMinusculas.length(); i++) {\n            aux = textoEnMinusculas.charAt(i);\n            if (aux != ' ') {\n                limpio = limpio + aux; // Concatenamos si no es espacio\n            }\n        }\n\n        // 2. Comparamos los caracteres (recorremos solo hasta la mitad)\n        for (int i = 0; i &lt; limpio.length()/2 &amp;&amp; esPalindromo; i++) {\n            if (limpio.charAt(i) != limpio.charAt(limpio.length() - 1 - i)) {\n                esPalindromo = false;\n            }\n        }\n        return esPalindromo;\n    }\n}\n</code></pre> <p>Salida:</p> <pre><code>'Se van sus naves' es un pal\u00edndromo.\n'Java Mola' NO es un pal\u00edndromo.\n</code></pre>"},{"location":"recursos/guia_intellij/","title":"Instalaci\u00f3n de IntelliJ y JDK.","text":"Fecha Versi\u00f3n Descripci\u00f3n 10/09/2021 1.0.0 Versi\u00f3n inicial 08/09/2025 1.0.1 Versi\u00f3n actualizada"},{"location":"recursos/guia_intellij/#guia-de-instalacion-intellij","title":"Gu\u00eda de instalaci\u00f3n IntelliJ","text":""},{"location":"recursos/guia_intellij/#1-instalacion-del-jdk","title":"1. Instalaci\u00f3n del JDK","text":"<p>Para poder trabajar con Java necesitamos tener instalado el JDK en nuestro sistema. Tanto en Windows, Linux o macOS, podemos saber qu\u00e9 versi\u00f3n tenemos con el comando siguiente:</p> <p>java --version</p> <p>Nos mostrar\u00e1 qu\u00e9 versi\u00f3n tenemos instalada:</p> <p></p> <p>En caso de no tenerlo, lo m\u00e1s recomendable es descargar la \u00faltima versi\u00f3n LTS desde la web de Oracle:</p> <p>https://www.oracle.com/es/java/technologies/downloads/</p> <p>Para poder descargar el jdk deber\u00e9is registraros previamente.</p> <p></p>"},{"location":"recursos/guia_intellij/#2-intellij-idea-community-edition-de-jetbrains","title":"2. Intellij IDEA Community Edition de JetBrains","text":"<p>Como IDE (Entorno de Desarrollo Integrado) podemos hacer uso de la herramienta Intellij IDEA Community Edition de JetBrains.</p> <p>En concreto de la versi\u00f3n Comunity. Nos va a permitir\u00e1 desarrollar todos los contenidos del curso.</p> <p>Est\u00e1 limitada pero no nos importa para el uso que vamos a hacer.</p> <p>Su p\u00e1gina oficial de descarga est\u00e1 en Jetbrains. IntelliJ.</p> <p></p> <p>Cuando abrimos por primera vez la aplicaci\u00f3n, nos aparece esto:</p> <p></p> <p>Trabajaremos con Proyectos de Java. Si creamos uno proyecto, por defecto, podremos ver:</p> <p></p> <p>La salida est\u00e1ndar la podremos ver en la propia terminal del IDE. El resultado de ejecutar el c\u00f3digo de ejemplo es:</p> <p></p>"},{"location":"unidades/ud01/","title":"Unidad 1 - Introducci\u00f3n a la programaci\u00f3n. Lenguaje Java.","text":"Fecha Versi\u00f3n Descripci\u00f3n 10/09/2021 1.0.0 Versi\u00f3n inicial. 17/09/2021 1.0.1 Correcci\u00f3n en la declaraci\u00f3n de variables. 20/09/2021 1.0.2 Correcci\u00f3n del \u00edndice. 01/09/2025 1.0.3 Revisi\u00f3n del tema. 08/09/2025 1.0.4 Adaptaci\u00f3n del tema."},{"location":"unidades/ud01/#1-programa","title":"1 Programa","text":""},{"location":"unidades/ud01/#11-programador-y-usuario","title":"1.1 Programador y Usuario","text":"<ul> <li>Un/a programador/a es aquella persona que se encarga de codificar programas, es decir, de escribir las instrucciones que un ordenador debe seguir.</li> <li>Usuario/a es el t\u00e9rmino que se utiliza para referirse a la persona que utiliza una aplicaci\u00f3n inform\u00e1tica con la intenci\u00f3n de conseguir un resultado final.</li> </ul>"},{"location":"unidades/ud01/#12-algoritmo-vs-programa-vs-aplicacion-informatica","title":"1.2 Algoritmo vs Programa vs Aplicaci\u00f3n Inform\u00e1tica","text":"<ul> <li>Un algoritmo es un m\u00e9todo de resoluci\u00f3n de un problema en un n\u00famero finito de pasos. Es como una receta de cocina: una secuencia clara y ordenada de acciones para llegar a un resultado. Ejemplo: \u00bfc\u00f3mo hacer una tortilla francesa?</li> <li>Un programa es la expresi\u00f3n de un algoritmo en un lenguaje comprensible para el ordenador. Es la \"traducci\u00f3n\" de nuestra receta a un idioma que la m\u00e1quina pueda ejecutar.</li> <li>Una aplicaci\u00f3n inform\u00e1tica es un conjunto de programas enlazados de manera conveniente para realizar una tarea m\u00e1s compleja.</li> </ul>"},{"location":"unidades/ud01/#121-el-paso-intermedio-pseudocodigo","title":"1.2.1 El paso intermedio: Pseudoc\u00f3digo","text":"<p>Antes de saltar directamente a escribir en un lenguaje de programaci\u00f3n como Java, los programadores usamos una herramienta intermedia fundamental: el pseudoc\u00f3digo.</p> <p>El pseudoc\u00f3digo es una forma de describir un algoritmo utilizando una mezcla de lenguaje natural y algunas convenciones de los lenguajes de programaci\u00f3n. Su gran ventaja es que nos permite centrarnos en la l\u00f3gica del problema sin preocuparnos por la sintaxis estricta (puntos y comas, llaves, etc.).</p> <p>Ejemplo: Algoritmo para sumar dos n\u00fameros en pseudoc\u00f3digo</p> <pre><code>INICIO\n  LEER numero1\n  LEER numero2\n  resultado = numero1 + numero2\n  ESCRIBIR \"El resultado es: \", resultado\nFIN\n</code></pre> <p>Dominar el pseudoc\u00f3digo es clave para aprender a \"pensar como un programador\".</p>"},{"location":"unidades/ud01/#13-programa-vs-procesador","title":"1.3 Programa vs procesador","text":"<ul> <li>Llamamos procesador toda entidad capaz de ejecutar un algoritmo. En \u00faltima instancia ser\u00e1 la CPU del ordenador, m\u00f3vil o TV.</li> <li>Un programa constar\u00e1 de:</li> <li>Instrucciones: una instrucci\u00f3n es una combinaci\u00f3n de palabras, datos y s\u00edmbolos que, obedeciendo la sintaxis propia del lenguaje, son utilizados por el ordenador para llevar a cabo una acci\u00f3n determinada.</li> <li>Datos: llamamos dato toda informaci\u00f3n que utiliza el ordenador.</li> <li>Un programa recibe datos de entrada, los procesa siguiendo las instrucciones y produce unos datos de salida.</li> </ul>"},{"location":"unidades/ud01/#131-como-es-un-programa-un-primer-vistazo","title":"1.3.1 \u00bfC\u00f3mo es un programa? Un primer vistazo","text":"<p>Aunque todav\u00eda no conozcamos los detalles, es bueno tener una primera imagen de c\u00f3mo es un programa real. Este es el programa m\u00e1s famoso para empezar a programar, el \"Hola Mundo\", escrito en Java:</p> <pre><code>public class HolaMundo {\n  public static void main(String[] args) {      \n    System.out.println(\"\u00a1Hola Mundo!\");\n  }\n}\n</code></pre> <p>Este peque\u00f1o bloque de c\u00f3digo es un programa completo que le ordena al ordenador escribir el mensaje \"\u00a1Hola Mundo!\" en la pantalla. \u00a1As\u00ed de simple y potente es la programaci\u00f3n!</p>"},{"location":"unidades/ud01/#132-paradigmas-de-programacion","title":"1.3.2 Paradigmas de Programaci\u00f3n","text":"<p>Los programas deben ser fiables, legibles, eficientes y modulares. Para conseguirlo, a lo largo de la historia han surgido diferentes formas o \"estilos\" de programar, conocidos como paradigmas:</p> <ol> <li>Programaci\u00f3n estructurada: Usar \u00fanicamente secuencias, instrucciones condicionales e instrucciones repetitivas. Es la base de todo.</li> <li>Programaci\u00f3n modular: El programa se dise\u00f1a por partes (m\u00f3dulos o funciones), como si fueran piezas de un puzle.</li> <li>Programaci\u00f3n orientada a objetos (POO): El paradigma que usaremos en este m\u00f3dulo. Se basa en \"objetos\" que agrupan datos (atributos) y comportamientos (m\u00e9todos). Lo veremos en profundidad.</li> <li>Otros:    - Programaci\u00f3n concurrente: \u00datil cuando tenemos que realizar varias acciones a la vez. Se ve en segundo curso.    - Programaci\u00f3n funcional, Programaci\u00f3n l\u00f3gica...</li> </ol>"},{"location":"unidades/ud01/#14-ciclo-de-vida-del-software","title":"1.4 Ciclo de vida del software","text":"<p>El ciclo de vida del software (el proceso de creaci\u00f3n y explotaci\u00f3n de un programa) se puede comparar con la construcci\u00f3n de una casa: no se empieza poniendo ladrillos al azar, sino que se sigue un proceso ordenado.</p> <p></p> <p>Este modelo, conocido como \"modelo en cascada\", describe las fases de forma secuencial:</p> <ul> <li>An\u00e1lisis: Entender qu\u00e9 necesita el cliente (los \"planos\" iniciales de la casa).</li> <li>Dise\u00f1o: Detallar c\u00f3mo se va a construir el programa (dise\u00f1o t\u00e9cnico, como la estructura y la fontaner\u00eda). Aqu\u00ed es donde creamos nuestro algoritmo.</li> <li>Codificaci\u00f3n: Escribir el c\u00f3digo en un lenguaje de programaci\u00f3n (\u00a1poner los ladrillos!).</li> <li>Pruebas: Comprobar que todo funciona como se esperaba (revisar que no haya grietas ni goteras).</li> <li>Mantenimiento: Corregir errores y a\u00f1adir nuevas funcionalidades una vez el programa est\u00e1 en uso (reformas y reparaciones).</li> </ul> <p>Es un modelo ideal. En la realidad, es com\u00fan tener que volver a una fase anterior (iterar) si se descubre un problema.</p>"},{"location":"unidades/ud01/#15-interprete-vs-compilador","title":"1.5 Int\u00e9rprete vs Compilador","text":"<ul> <li>Para que el ordenador entienda nuestro c\u00f3digo fuente (escrito en un lenguaje de alto nivel como Java), necesita ser traducido a c\u00f3digo m\u00e1quina (0s y 1s). Hay dos tipos de traductores:</li> </ul> <p>Int\u00e9rprete:</p> <ul> <li>Traduce y ejecuta el c\u00f3digo l\u00ednea a l\u00ednea.</li> <li>No genera un fichero ejecutable independiente.</li> <li>M\u00e1s lento, pero m\u00e1s f\u00e1cil para depurar.</li> <li>Ejemplos: Python, PHP.</li> </ul> <p></p> <p>Compilador:</p> <ul> <li>Traduce todo el c\u00f3digo fuente de golpe a un fichero de c\u00f3digo objeto o ejecutable.</li> <li>El programa resultante es m\u00e1s r\u00e1pido.</li> <li>Si hay un error, hay que volver a compilar todo el programa.</li> <li>Ejemplos: C, C++.</li> </ul> <p></p>"},{"location":"unidades/ud01/#16-java-50-compilado-50-interpretado","title":"1.6 Java: 50% Compilado - 50% Interpretado","text":"<p>El lenguaje Java es especial, ya que combina ambos mundos:</p> <ol> <li>Fase de Compilaci\u00f3n: El compilador de Java (<code>javac</code>) traduce nuestro c\u00f3digo fuente (<code>.java</code>) a un lenguaje intermedio llamado bytecodes (<code>.class</code>). Este c\u00f3digo no es directamente ejecutable por el procesador.</li> <li>Fase de Interpretaci\u00f3n: La M\u00e1quina Virtual de Java (JVM), que act\u00faa como un int\u00e9rprete, coge los bytecodes y los traduce a c\u00f3digo m\u00e1quina espec\u00edfico del sistema donde se est\u00e1 ejecutando.</li> </ol> <p></p> <p>Esta arquitectura es la que le da a Java su famosa caracter\u00edstica \"Write Once, Run Anywhere\" (Escribe una vez, ejecuta en cualquier parte), ya que el mismo fichero <code>.class</code> puede ser ejecutado en Windows, Linux, Mac, etc., siempre que tengan una JVM instalada.</p> <p></p>"},{"location":"unidades/ud01/#17-correccion-de-programas","title":"1.7 Correcci\u00f3n de programas","text":"<p>Un programa sin errores es una utop\u00eda. Para encontrarlos y corregirlos, usamos dos t\u00e9cnicas:</p> <ul> <li>Testing (Pruebas): Se crea un juego de pruebas, un conjunto de casos de uso (con entradas y salidas esperadas) para verificar que el programa se comporta correctamente en todas las situaciones posibles.</li> <li>Debugging (Depuraci\u00f3n): Se utiliza una herramienta llamada depurador (debugger) que permite ejecutar el programa paso a paso, inspeccionar el valor de los datos en cada momento y encontrar el punto exacto donde se produce un error.</li> </ul> <p>Tipos de errores comunes:</p> <ul> <li>Errores de sintaxis: No seguir las reglas gramaticales del lenguaje. El compilador los detecta.</li> <li>Errores de ejecuci\u00f3n: Ocurren cuando el programa est\u00e1 en marcha (ej: dividir por cero).</li> <li>Errores l\u00f3gicos: El programa funciona pero hace algo incorrecto. Son los m\u00e1s dif\u00edciles de encontrar.</li> </ul>"},{"location":"unidades/ud01/#18-que-lenguaje-elegir","title":"1.8 \u00bfQu\u00e9 lenguaje elegir?","text":"<p>Existen cientos de lenguajes de programaci\u00f3n. Puedes ver un ranking de popularidad aqu\u00ed.</p> <p>Este a\u00f1o estudiaremos Java, pero aqu\u00ed tienes una comparativa con otros lenguajes populares:</p> <p>C: Lenguaje de bajo/medio nivel. Muy r\u00e1pido y potente, permite un control directo del hardware. Es el lenguaje base de la mayor\u00eda de sistemas operativos.</p> <p>Java: Lenguaje de alto nivel, multiplataforma y orientado a objetos. Extremadamente popular para el desarrollo de aplicaciones empresariales (backend), aplicaciones Android y en el mundo del Big Data.</p> <p>Python: Lenguaje de alto nivel, muy f\u00e1cil de aprender por su sintaxis clara y legible. Es el rey en ciencia de datos, inteligencia artificial y scripting.</p>"},{"location":"unidades/ud01/#2-la-informacion","title":"2 La Informaci\u00f3n","text":""},{"location":"unidades/ud01/#21-que-es-la-informacion","title":"2.1 \u00bfQu\u00e9 es la informaci\u00f3n?","text":"<p>Un programa manipula datos. Los datos son la representaci\u00f3n de la informaci\u00f3n. Para un ordenador, toda la informaci\u00f3n (n\u00fameros, texto, im\u00e1genes, etc.) se reduce a secuencias de 0s y 1s (bits).</p> <p>Nosotros, como programadores, trabajamos con un nivel de abstracci\u00f3n mayor, utilizando lenguajes de programaci\u00f3n para manejar estos datos de forma m\u00e1s sencilla.</p>"},{"location":"unidades/ud01/#22-datos","title":"2.2 Datos","text":"<p>Un dato es cualquier informaci\u00f3n con la que trabaja un algoritmo. Cada dato es de un tipo determinado (entero, real, car\u00e1cter...). Los datos aparecen en un programa como variables o constantes.</p>"},{"location":"unidades/ud01/#221-variables","title":"2.2.1 Variables","text":"<p>Analog\u00eda: Piensa en una variable como una caja etiquetada. La etiqueta es el nombre de la variable, lo que hay dentro es su valor, y el tipo de caja (para zapatos, para joyas...) determina el tipo de dato que puedes guardar.</p> <p>Una variable es un espacio en la memoria del ordenador (RAM) donde podemos guardar un dato que puede cambiar durante la ejecuci\u00f3n del programa.</p> <p>Cada variable se caracteriza por tener:</p> <ul> <li>Un nombre (ej: <code>edad</code>) y un tipo (ej: entero).</li> <li>Un valor (ej: <code>17</code>) que se le asigna y puede cambiar.</li> </ul> <p></p> <p>Las variables se almacenan en la memoria RAM, de forma que:</p> <ul> <li>El nombre (edad) representa la direcci\u00f3n de la RAM donde est\u00e1 el valor</li> <li>El tipo (entero) especifica la cantidad de bytes necesarios para guardar un valor (4).</li> <li>El valor es el contenido (17).</li> </ul> <p></p> <pre><code>// instrucci\u00f3n declarativa\n\nint edad;   // Definimos una variable, de nombre edad y de tipo entero\n\n// instrucciones de asignaci\u00f3n\n\nedad = 17; // Damos valor 17 a la variable edad\nlee (edad); // Asignamos por teclado un valor a edad. Por ej. 19\nedad = edad + 3; // Volvemos a cambiar el valor. Ahora valdr\u00e1 22\nedad = 23.5; // Error. \u00bfPor qu\u00e9?\n\n// utilizaci\u00f3n de la variable\nescribe (edad);\n</code></pre>"},{"location":"unidades/ud01/#222-precision-de-las-variables","title":"2.2.2 Precisi\u00f3n de las variables","text":"<p>El tipo de dato determina cu\u00e1nta memoria (cu\u00e1ntos bytes) ocupa una variable. Por ejemplo, con 1 byte podemos almacenar 28=256 valores diferentes.</p> <ul> <li>Si solo guardamos n\u00fameros positivos, el rango ser\u00eda de 0 a 255.</li> <li>Si queremos guardar tambi\u00e9n negativos, se utiliza un sistema (complemento a dos) que divide el rango, quedando de -128 a 127.</li> </ul> <p>Elegir el tipo de dato adecuado es importante para no desperdiciar memoria y para asegurarnos de que podemos almacenar los valores que necesitamos.</p>"},{"location":"unidades/ud01/#223-constantes","title":"2.2.3 Constantes","text":"<p>Una constante es como una variable, pero su valor no puede cambiar una vez que se ha establecido. Se usan para valores fijos y conocidos, como el n\u00famero PI.</p> <p></p> <p>Es necesario resaltar que:</p> <ul> <li>Por convenio, los nombres de las constantes se escriben en may\u00fasculas (<code>PI</code>, <code>IVA_GENERAL</code>) y se escriben al principio del programa.</li> <li>Las constantes de car\u00e1cter (una sola letra) van entre comillas simples (<code>'A'</code>).</li> <li>Las cadenas de texto van entre comillas dobles (<code>\"Hola\"</code>).</li> </ul>"},{"location":"unidades/ud01/#23-nombres","title":"2.3 Nombres","text":"<p>Las variables y constantes necesitan un nombre (identificador) para poder usarlas. Las reglas generales son:</p> <ul> <li>Pueden contener letras, n\u00fameros y el s\u00edmbolo <code>_</code>.</li> <li>Deben empezar por una letra o <code>_</code>.</li> <li>No pueden contener espacios en blanco.</li> <li>No pueden ser palabras reservadas del lenguaje (<code>while</code>, <code>class</code>, <code>int</code>...).</li> <li>Como dec\u00edamos, las constantes se escriben en may\u00fasculas (as\u00ed cualquier programador las reconoce).</li> </ul>"},{"location":"unidades/ud01/#24-tipos-de-datos","title":"2.4 Tipos de datos","text":"<p>Los tipos de datos se pueden clasificar de muchas formas. Una primera clasificaci\u00f3n b\u00e1sica es:</p> <p></p> <p>El caso especial del String: En muchos lenguajes como Java, un texto (<code>String</code>) no es un tipo de dato simple (primitivo). Es un objeto, una estructura m\u00e1s compleja. Sin embargo, el lenguaje nos permite tratarlo de una forma muy similar a los tipos simples, lo que facilita mucho su uso.</p>"},{"location":"unidades/ud01/#241-datos-simples-y-compuestos","title":"2.4.1 Datos simples y compuestos","text":"<p>Una clasificaci\u00f3n de los datos (sobre todo de las variables) es saber si estas son simples o compuestas:</p> <ul> <li> <p>Simples: Almacenan un \u00fanico valor (un n\u00famero, una letra, un estado booleano). Ej: <code>Edad</code>, <code>NotaMedia</code>.</p> </li> <li> <p>Compuestos: Se forman a partir de la agrupaci\u00f3n de varios datos simples. Ej: <code>FechaNacimiento</code> (compuesta por d\u00eda, mes y a\u00f1o), <code>Direccion</code>.</p> </li> </ul> <p></p> <p></p> <p></p> <p>El p\u00edxel de la celda <code>(772-202)</code> tiene los valores RGB <code>[77, 148, 210]</code>.</p> <p>Si hacemos un r\u00e1pido recuento, una imagen de 600x400, en color real necesitar\u00e1 600x400x3 = 720.000 bytes ~ 703 KB en memoria</p>"},{"location":"unidades/ud01/#242-abstraccion-de-datos","title":"2.4.2 Abstracci\u00f3n de datos","text":"<p>La abstracci\u00f3n es uno de los conceptos m\u00e1s importantes en programaci\u00f3n. Consiste en \"quedarnos solo con lo que nos interesa\".</p> <p>Un \"ente\" del mundo real tiene much\u00edsimos datos (una persona tiene nombre, edad, altura, color de ojos, hobbies...). Cuando creamos un programa, solo modelamos los datos que son relevantes para el problema que queremos resolver.</p> <ul> <li>Para la DGT, de un coche interesa su matr\u00edcula, marca, modelo y due\u00f1o.</li> <li>Para un taller mec\u00e1nico, interesa adem\u00e1s el nivel de aceite, la presi\u00f3n de las ruedas, etc.</li> </ul> <p>Para pensar... Despu\u00e9s de ver los tipos de datos, reflexiona:</p> <ul> <li>\u00bfQu\u00e9 tipo de variable usar\u00edas para almacenar el n\u00famero de alumnos en una clase?</li> <li>\u00bfY para guardar la letra de tu DNI?</li> <li>\u00bfY para saber si un alumno es repetidor o no?</li> </ul>"},{"location":"unidades/ud01/#3-instrucciones-y-operadores","title":"3 Instrucciones y Operadores","text":""},{"location":"unidades/ud01/#31-expresiones","title":"3.1 Expresiones","text":"<p>Las constantes y variables no aparecen aisladas, sino formando parte de expresiones. </p> <p>Una expresi\u00f3n es una combinaci\u00f3n de operandos (variables, constantes, literales) y operadores que, al ser evaluada, produce un resultado.</p> <p>Los operandos pueden ser de diferentes tipos:</p> <ul> <li>Constantes: <code>PI</code></li> <li>Variables: <code>edad</code></li> <li>Funciones: <code>ra\u00edz (100)</code>, <code>longitud (nombre)</code></li> <li>Literales: <code>100</code>,<code>\"IES Camp de Morvedre\"</code></li> </ul> <p>Ejemplos de expresiones:</p> Tipos Expresiones Num\u00e9ricas <code>edad</code> <code>5</code> <code>2*PI*quadrado(radio)</code> <code>(-b+raiz(quadradp(b)-4*a*c)/(2*a)</code> Alfanum\u00e9ricas <code>\"Pedro\"</code> <code>\"Daenerys\" + \"De la tormenta\"</code> L\u00f3gicas <code>True</code> <code>False</code> <code>a&lt;b</code> <code>(v1&lt;v2) &amp;&amp; (v2&lt;v3)</code>"},{"location":"unidades/ud01/#32-operadores","title":"3.2 Operadores","text":"<p>Son los s\u00edmbolos que nos permiten realizar operaciones con los datos.</p> <p>Dependiendo del tipo de datos de los operandos, o del tipo del resultado, tenemos unos tipos de operadores: aritm\u00e9ticos, l\u00f3gicos, relacionales y alfanum\u00e9ricos.</p>"},{"location":"unidades/ud01/#321-operadores-aritmeticos","title":"3.2.1 Operadores aritm\u00e9ticos","text":"<p>Realizan operaciones matem\u00e1ticas. </p> <p>Las variables o constantes que intervienen deben ser num\u00e9ricas (enteros o reales) y el resultado tambi\u00e9n. </p> <p>Los m\u00e1s usuales son:</p> Operador Significado <code>^</code> \u00f3 <code>**</code> Potencia <code>*</code> Producto <code>/</code>\u00f3 <code>//</code> Divisi\u00f3n <code>%</code> Residuo <code>+</code> Suma <code>-</code> Resta <p>\u00a1Cuidado con la divisi\u00f3n de enteros! En la mayor\u00eda de lenguajes de programaci\u00f3n, si divides dos n\u00fameros enteros, el resultado ser\u00e1 tambi\u00e9n un entero (se trunca la parte decimal).</p> <p>Por ejemplo, <code>5 / 2</code> dar\u00e1 como resultado <code>2</code>, no <code>2.5</code>. Para obtener el resultado real, uno de los n\u00fameros debe ser de tipo real.</p> <p>Las expresiones que tienen dos o m\u00e1s operandos necesitan unas reglas que permiten determinar en qu\u00e9 orden se eval\u00faan. Si escribimos <code>2 * 5-3</code>, \u00bfel resultado es<code>7</code> o <code>4</code>?</p> <p>Para evaluar expresiones complejas, se siguen unas reglas de prioridad (similar a las matem\u00e1ticas): primero potencias, luego multiplicaciones/divisiones, y por \u00faltimo sumas/restas. Se pueden usar par\u00e9ntesis <code>()</code> para alterar este orden.</p> <p>Para ello est\u00e1n las reglas de prioridad, que son estas:</p> Operador Prioridad <code>^</code> mas alta <code>*, /, %</code> <code>+,-</code> mas baja"},{"location":"unidades/ud01/#322-operadores-relacionales","title":"3.2.2 Operadores relacionales","text":"<p>Sirven para comparar dos expresiones. Su resultado es siempre un valor l\u00f3gico: <code>verdadero</code> o <code>falso</code>.</p> Operador Significado <code>&gt;</code> mayor <code>&lt;</code> menor <code>==</code> igual <code>!=</code> distinto <code>&gt;=</code> mayor o igual <code>&lt;=</code> menor o igual <p>Por ejemplo, suponemos las siguientes variables: <code>x = 10, y = 20</code>:</p> Expresi\u00f3n Valor <code>(x+y)&lt;20</code> <code>false</code> <code>(y-x)&lt;=x</code> <code>true</code> <code>(x+y)&gt;=x</code> <code>true</code> <code>x==y</code> <code>false</code> <code>x!=y</code> <code>true</code>"},{"location":"unidades/ud01/#323-operadores-logicos","title":"3.2.3 Operadores l\u00f3gicos","text":"<p>Act\u00faan sobre operandos l\u00f3gicos y devuelven un resultado l\u00f3gico. Los b\u00e1sicos son <code>AND</code> (Y), <code>OR</code> (O) y <code>NOT</code> (NO).</p> <p>Tablas de verdad:</p> x y not x x or y x and y Falso Falso V F F Falso V V V F V Falso F V F V V F V V <p>Leyes de De Morgan</p> <p>Son tres leyes b\u00e1sicas que cumplen las expresiones relacionales y que nos pueden servir para expresar de diferentes formas lo que queremos:</p> <pre><code>1a) NOT (NOT A)     =   A\n2a) NOT (A AND B)   =   (NOT A) OR (NOT B)\n3a) NOT (A OR B)    =   (NOT A) AND (NOT B)\n</code></pre> <p>Negaci\u00f3n de los operadores relacionales</p> <p>Los operadores relacionales pueden negarse tambi\u00e9n para obtener expresiones m\u00e1s sencillas o de acuerdo a nuestras necesidades. </p> <p>La siguiente tabla muestra dichas negaciones:</p> OPERADOR Negaci\u00f3n &lt; &gt;= &gt; &lt;= == != != == &lt;= &gt; &gt;= &lt; <p>Cambios de prioridad</p> <p>Como los operadores l\u00f3gicos y relacionales pueden formar expresiones junto con los aritm\u00e9ticos necesitamos unas reglas de prioridad para saber qu\u00e9 operadores eval\u00faan primero.</p> OPERADOR PRIORIDAD NOT Alta ^ *, /, % +, - &lt;, &gt;, &lt;=, &gt;= ==, != AND OR = Baja"},{"location":"unidades/ud01/#33-funciones","title":"3.3 Funciones","text":"<p>Son bloques de c\u00f3digo reutilizables que realizan una tarea espec\u00edfica.</p>"},{"location":"unidades/ud01/#331-funciones-predefinidas","title":"3.3.1 Funciones predefinidas","text":"<p>Vienen incluidas en el lenguaje de programaci\u00f3n para realizar tareas comunes (ej: <code>System.out.println()</code> para escribir en pantalla, <code>Math.sqrt()</code> para calcular una ra\u00edz cuadrada).</p> <p>Las funciones (al igual que en las de las matem\u00e1ticas) suelen recibir uno o m\u00e1s argumentos y devuelven un valor que llamamos resultado.</p> <p>Ejemplos de la funci\u00f3n de impresi\u00f3n por pantalla en distintos lenguajes:</p> <ul> <li><code>printf(\"Hola\");</code> </li> <li><code>System.out.println(\"Hola\");</code></li> <li><code>print(\"Hola\")</code> </li> <li><code>escribe(\"Hola\")</code></li> </ul> <p>Pensemos en la dificultad que supone ahora que empezamos a programar el hecho de pintar algo en pantalla. </p> <p>Escribir <code>Hola</code>, a efectos pr\u00e1cticos, es iluminar una serie de p\u00edxeles en pantalla en unas determinadas coordenadas en un determinado color, etc . </p> <p>Gracias a funciones como<code>print</code> esto es mucho m\u00e1s f\u00e1cil.</p>"},{"location":"unidades/ud01/#332-funciones-definidas-por-el-usuario","title":"3.3.2 Funciones definidas por el usuario","text":"<p>Los lenguajes de programaci\u00f3n tambi\u00e9n nos permiten definir nuestras funciones para poderlas utilizar en diferentes partes del programa.</p> <p>En <code>Java</code>:</p> <pre><code>float  area_triangulo(float base , float altura){\n  float area;\n  area = base * altura / 2\n  return area;\n}\n\n{\n  print(\"El \u00e1rea del tri\u00e1ngulo de base 2 y altura 4 es:\");\n  area = area_triangulo(2,4);\n  escribe( area );\n  escribe(\"El \u00e1rea del tri\u00e1ngulo de base 3 y altura 6 es:\");\n  area = area_triangulo(3,6);\n  escribe( area );\n}\n</code></pre> <p>En <code>Python</code>:</p> <pre><code>def area(base, altura):\n  area = base * altura / 2\n  return area;\n\nprint(\"El area es: \",area(7.6,4,5))\n</code></pre>"},{"location":"unidades/ud01/#4-el-lenguaje-java","title":"4 El lenguaje Java","text":"<p>Java es un lenguaje de programaci\u00f3n de prop\u00f3sito general, concurrente y orientado a objetos. Su filosof\u00eda es WORA (Write Once, Run Anywhere), lo que significa que el c\u00f3digo puede escribirse una sola vez y ser ejecutado en cualquier tipo de dispositivo.</p> <p>Caracter\u00edsticas principales de Java:</p> <ul> <li>Sencillo: Su sintaxis es relativamente f\u00e1cil de aprender, inspirada en C++.</li> <li>Orientado a Objetos: Posiblemente sea el lenguaje m\u00e1s puramente orientado a objetos. En Java, casi todo es un objeto.</li> <li>Distribuido: Excelente para trabajar en red, soportando m\u00faltiples protocolos.</li> <li>Robusto: El compilador detecta muchos errores que en otros lenguajes solo aparecer\u00edan en tiempo de ejecuci\u00f3n.</li> <li>Seguro: Dise\u00f1ado con la seguridad en mente, especialmente importante en aplicaciones de red.</li> <li>Portable y de Arquitectura Neutral: Gracias a la JVM, el mismo programa compilado (<code>.class</code>) funciona en cualquier sistema (Windows, Mac, Linux, etc.).</li> <li>Multithread (Multihilo): Soporta de forma nativa la ejecuci\u00f3n de varias tareas simult\u00e1neamente.</li> <li>Ecosistema enorme: Cuenta con una cantidad gigantesca de librer\u00edas y frameworks (como Spring) que lo hacen extremadamente potente para el desarrollo de grandes aplicaciones, especialmente en el entorno empresarial (backend), aplicaciones Android y sistemas de Big Data.</li> </ul>"},{"location":"unidades/ud01/#41-primer-ejemplo","title":"4.1 Primer ejemplo","text":"<p>La aplicaci\u00f3n m\u00e1s peque\u00f1a posible es la que simplemente imprime un mensaje en la pantalla. Tradicionalmente, cuando empezamos a programar, el mensaje suele ser \"\u00a1Hola Mundo!\".</p> <p>Revisa y prueba el siguiente c\u00f3digo de ejemplo</p> <pre><code>public class Main {\n\n  public static void main(String[] args) {      \n    System.out.println(\"\u00a1Hola Mundo!\");\n  }\n}\n</code></pre> <p>Vamos a analizar con m\u00e1s detalle el programa \"\u00a1Hola Mundo!\":</p> <ul> <li><code>public class Main</code>: Declara una clase llamada <code>Main</code>. En Java, todo el c\u00f3digo debe estar dentro de una clase. El nombre del fichero fuente debe coincidir, <code>Main.java</code>.</li> <li><code>public static void main(String[] args)</code>: Este es el m\u00e9todo principal. Es la puerta de entrada al programa. La JVM siempre buscar\u00e1 este m\u00e9todo para comenzar la ejecuci\u00f3n.</li> <li><code>public</code>: Puede ser llamado desde cualquier sitio.</li> <li><code>static</code>: Pertenece a la clase, no a un objeto. No necesitamos crear nada para llamarlo.</li> <li><code>void</code>: No devuelve ning\u00fan valor.</li> <li><code>String[] args</code>: Es un array que podr\u00eda recibir argumentos desde la l\u00ednea de comandos.</li> <li><code>System.out.println(\"\u00a1Hola Mundo!\");</code>: Esta es la instrucci\u00f3n que hace el trabajo. Llama al m\u00e9todo <code>println</code> del objeto <code>out</code> que est\u00e1 en la clase <code>System</code> para imprimir el texto en pantalla.</li> </ul> <p>El resultado ser\u00eda el siguiente:</p> <p></p> <p>PRECAUCI\u00d3N: Todas las instrucciones (creaci\u00f3n de variables, llamadas a m\u00e9todos, asignaciones) se deben finalizar con un punto y coma (;).</p>"},{"location":"unidades/ud01/#42-elementos-basicos","title":"4.2 Elementos b\u00e1sicos","text":""},{"location":"unidades/ud01/#421-comentarios","title":"4.2.1 Comentarios","text":"<p>Son notas que dejamos en el c\u00f3digo para explicarlo. El compilador las ignora.</p> <pre><code>// Comentario de una sola l\u00ednea\n\n/*\nComentario de\nvarias l\u00edneas.\n*/\n\n/**\n * Este es un comentario de documentaci\u00f3n (Javadoc).\n * Sirve para generar documentaci\u00f3n autom\u00e1tica.\n */ \n</code></pre>"},{"location":"unidades/ud01/#422-identificadores","title":"4.2.2 Identificadores","text":"<p>Los identificadores nombran variables, funciones, clases y objetos. Cualquier cosa que el programador necesite identificar o usar.</p> <p>Reglas y convenios:</p> <ul> <li>Distinguen may\u00fasculas de min\u00fasculas (<code>edad</code> y <code>Edad</code> son diferentes).</li> <li>Empiezan por letra o <code>_</code>.</li> <li>No pueden ser palabras reservadas (<code>public</code>, <code>class</code>, <code>int</code>...).</li> <li>Convenio CamelCase:</li> <li>Nombres de clases empiezan con may\u00fascula: <code>CalculadoraFacturas</code>.</li> <li>Nombres de variables y m\u00e9todos empiezan con min\u00fascula: <code>nombreUsuario</code>, <code>calcularTotal()</code>.</li> <li>Nombres de constantes van en may\u00fasculas y con <code>_</code>: <code>IVA_GENERAL</code>.</li> </ul> <p>Por ejemplo, ser\u00edan identificadores v\u00e1lidos:</p> <ul> <li>contador</li> <li>suma</li> <li>edad</li> <li>sueldoBruto</li> <li>sueldoNeto</li> <li>nombre_usuario</li> <li>nombre_Completo</li> <li>letraDni</li> </ul> <p>Y su uso ser\u00eda:</p> <pre><code>int contador; // crea variable de tipo int llamada contador\n\nfloat sueldoNeto; // crea variable de tipo float llamada sueldoNeto\n\nchar letraDni; // crea variable de tipo char llamada letraDni\n</code></pre>"},{"location":"unidades/ud01/#43-tipos-de-datos","title":"4.3 Tipos de datos","text":"<p>En Java existen dos tipos principales de datos:</p> <ul> <li> <p>Tipos de datos simples: Nos permiten crear variables que almacenan un solo valor. </p> </li> <li> <p>Tipos de datos compuestos: Estructuras de datos m\u00e1s complejas que permiten almacenar muchos datos (vectores, objetos, etc.).</p> </li> </ul> <p>Tipos de datos simples soportados por Java:</p> <ul> <li>N\u00fameros enteros: byte, short, int, long</li> <li>N\u00fameros reales: float, double</li> <li>Car\u00e1cteres: char</li> <li>Valores l\u00f3gicos: boolean</li> </ul> <p>En Java existen 8 tipos de datos simples o primitivos:</p> Tipo Descripci\u00f3n Memoria Rango de valores permitidos byte N\u00famero entero con signo 1 byte -128 a 127 short N\u00famero entero corto con signo 2 bytes -32.768 a 32.767 int N\u00famero entero con signo 4 bytes -2.147.483.648 a 2.147.483.647 long N\u00famero entero largo con signo 8 bytes Muy grande float N\u00famero real de precisi\u00f3n simple 4 bytes (32 bits) \u00b13,410^-38 a \u00b13,410^38 double N\u00famero real de precisi\u00f3n doble 8 bytes (64 bits) \u00b11,710^-308 a \u00b11,710^308 char Un solo car\u00e1cter (Unicode) 2 bytes Representa un car\u00e1cter boolean Valor l\u00f3gico 1 bit <code>true</code> o <code>false</code> <p>Java no comprueba los desbordamientos de rango. Si a una variable <code>byte</code> con valor 127 le sumas 1, pasar\u00e1 a valer -128 (comportamiento c\u00edclico).</p> <p>Existe un tipo de dato compuesto llamado String que conviene conocer ya que permite representar texto. M\u00e1s adelante veremos c\u00f3mo se utiliza.</p>"},{"location":"unidades/ud01/#44-declaracion-de-variables","title":"4.4 Declaraci\u00f3n de variables","text":"<p>La sintaxis para declarar una variable es:</p> <p><code>tipo identificador [ = valor][,identificador [= valor] ...];</code></p> <pre><code>// Declarar una variable\nint edad;\n\n// Declarar e inicializar en la misma l\u00ednea\nint edad = 25;\n\n// Declarar varias variables del mismo tipo\nfloat precio1, precio2, precio3;\n\n// Declararlas e inicializarlas\nfloat precio1 = 7.0f, precio2 = 7.25f, precio3 = 0.5f;\n</code></pre> <p>Los literales num\u00e9ricos con decimales en Java son de tipo <code>double</code> por defecto. Para asignar un valor a una variable <code>float</code>, debemos a\u00f1adir una <code>f</code> al final del n\u00famero (<code>7.0f</code>). Si no lo hacemos, el compilador dar\u00e1 un error de \"posible p\u00e9rdida de precisi\u00f3n\".</p> <p>Otros ejemplos a la hora de definir valores:</p> <pre><code>double a = 15.2; // de tipo double\ndouble b = 15.2D; // el mismo valor\ndouble c = 1.52e1; // el mismo valor\ndouble d = 0.152E2; // el mismo valor\ndouble e = .8e10; // de tipo double\nfloat f = 15.8f; // de tipo float\nfloat g = 15.8F; // tambien de tipo float\n</code></pre> <p>Como se ver\u00e1 m\u00e1s adelante cada tipo de dato primitivo tiene una clase correspondiente (<code>Boolean, Character, Byte, Short, Integer, Long, Float y Double</code>), llamadas wrappers, que definen tambi\u00e9n constantes y m\u00e9todos \u00fatiles.</p> <p>Es obligatorio indicar el tipo y el identificador. </p> <p>Si una variable no ha sido inicializada Java le asigna un valor por defecto.</p> <p>Este valor es:</p> <ul> <li>Para las variables de tipo num\u00e9rico, el valor por defecto es cero ( 0 ).</li> <li>Las variables de tipo char, el valor ''\\u0000''.</li> <li>Las variables de tipo boolean, el valor false.</li> <li>Para las variables de tipo referencial (objetos), el valor null.</li> </ul> <p>Es una buena pr\u00e1ctica inicializar siempre todas las variables.</p> <p>Palabras clave</p> <p>Palabras que no podemos utilizar salvo en las instrucciones del lenguaje.</p> abstract continue for new switch boolean default goto null synchronized break do if package this byte double implements private threadsafe byvalue else import protected throw case extends instanceof public transient catch false int return true char final interface short try class finally long static void const float native super while <p>Palabras reservadas</p> <p>Adem\u00e1s, el lenguaje se reserva unas cuantas palabras m\u00e1s, pero que hasta ahora no tienen un cometido espec\u00edfico. </p> cast uture generic inner operator outer rest var"},{"location":"unidades/ud01/#441-ambito-de-una-variable","title":"4.4.1 \u00c1mbito de una variable","text":"<p>El \u00e1mbito de una variable es la parte del programa donde esa variable existe y puede ser utilizada.</p> <p>En Java, a grandes rasgos, podemos distinguir:</p> <ul> <li>Variables de instancia y de clase (<code>static</code>): Pertenecen a un objeto o a una clase. Su \u00e1mbito es todo el objeto/clase. Las veremos en profundidad en Programaci\u00f3n Orientada a Objetos.</li> <li>Variables locales: Se declaran dentro de un m\u00e9todo o un bloque de c\u00f3digo (<code>{...}</code>). Su \u00e1mbito se limita exclusivamente a ese m\u00e9todo o bloque. Una vez que la ejecuci\u00f3n sale de ah\u00ed, la variable \"muere\" y su memoria se libera.</li> </ul> <p>Por ahora, nos centraremos exclusivamente en las variables locales. Es una buena pr\u00e1ctica declarar las variables en el \u00e1mbito m\u00e1s reducido posible.</p>"},{"location":"unidades/ud01/#442-variables-locales","title":"4.4.2 Variables locales","text":"<p>Una variable local se declara dentro del cuerpo de un m\u00e9todo de una clase y es visible \u00fanicamente dentro de dicho m\u00e9todo.</p> <p>Es una buena costumbre declararlas justo al principio.</p> <p>Tambi\u00e9n pueden declararse variables dentro de un bloque con llaves { }. En ese caso, s\u00f3lo ser\u00e1n visibles dentro de dicho bloque.</p> <p>Un ejemplo (no es necesario entenderlo) :</p> <pre><code>    public static void main(String[] args) {\n        int i;\n        for (i=0;i&lt;10;i++)\n            System.out.println(\"El valor de i es: \"+i);\n    }\n</code></pre> <p>En este ejemplo existe una variable local: int i; \u00fanicamente puede utilizarse dentro del bloque main donde fue creada.</p>"},{"location":"unidades/ud01/#443-constantes-final","title":"4.4.3 Constantes (final)","text":"<p>Para declarar una constante, usamos la palabra reservada <code>final</code>. Su valor no podr\u00e1 ser modificado.</p> <pre><code>final int MAYORIA_EDAD = 18;\nfinal float PI = 3.1416f;\n\n// MAYORIA_EDAD = 21; // Esto dar\u00eda un error de compilaci\u00f3n.\n</code></pre>"},{"location":"unidades/ud01/#45-operadores","title":"4.5 Operadores","text":"<p>Los operadores son una parte indispensable de la programaci\u00f3n ya que nos permiten realizar c\u00e1lculos matem\u00e1ticos y l\u00f3gicos, entre otras cosas. </p> <p>Los operadores pueden ser:</p> <ul> <li> <p>Aritm\u00e9ticos: sumas, restas, etc.</p> </li> <li> <p>Relacionales: menor, menor o igual, mayor, mayor o igual, etc.</p> </li> <li> <p>L\u00f3gicos: and, or, not, etc.</p> </li> <li> <p>Bits: pr\u00e1cticamente no los utilizaremos en este curso.</p> </li> <li> <p>Asignaci\u00f3n: =</p> </li> </ul>"},{"location":"unidades/ud01/#451-aritmeticos","title":"4.5.1 Aritm\u00e9ticos","text":"Operador Formato Descripci\u00f3n + <code>op1 + op2</code> Suma - <code>op1 - op2</code> Resta * <code>op1 * op2</code> Multiplicaci\u00f3n / <code>op1 / op2</code> Divisi\u00f3n (entera si ambos son enteros) % <code>op1 % op2</code> Resto de la divisi\u00f3n (m\u00f3dulo) ++ <code>op1++</code> \u00f3 <code>++op1</code> Incremento en 1 (<code>op1 = op1 + 1</code>) -- <code>op1--</code> \u00f3 <code>--op1</code> Decremento en 1 (<code>op1 = op1 - 1</code>) <p>Pre-incremento vs. Post-incremento:</p> <ul> <li>Post-incremento (<code>op1++</code>): Primero se usa el valor actual de <code>op1</code> en la expresi\u00f3n y despu\u00e9s se incrementa.</li> <li>Pre-incremento (<code>++op1</code>): Primero se incrementa <code>op1</code> y despu\u00e9s se usa el nuevo valor en la expresi\u00f3n.</li> </ul> <p>Para pensar... Si <code>int x = 5;</code>, \u00bfqu\u00e9 valor tendr\u00e1 <code>y</code> en cada caso?</p> <ol> <li><code>int y = x++;</code></li> <li><code>int y = ++x;</code></li> </ol>"},{"location":"unidades/ud01/#452-relacionales","title":"4.5.2 Relacionales","text":"Operador Formato Descripci\u00f3n &gt; <code>op1</code> &gt; op2 Mayor que &lt; <code>op1 &lt; op2</code> Menor que &gt;= <code>op1 &gt;= op2</code> Mayor o igual que &lt;= <code>op1 &lt;= op2</code> Menor o igual que == <code>op1 == op2</code> Igual que != <code>op1</code> !=<code>op2</code> Distinto que <p>Los operadores relacionales act\u00faan sobre valores enteros, reales y caracteres. Devuelven un valor del tipo boolean (true, false).</p> <p>Ejemplo:</p> <pre><code>public static void main(String[] args) {\n        double op1, op2;\n        char op3, op4;\n        op1=1.34;\n        op2=1.35;\n        op3='a';\n        op4='b';\n\n        System.out.println(\"op1=\"+ op1 +\" ope2=\"+ op2);\n        System.out.println(\"op1&gt;op2=\" + (op1 &gt; op2));\n        System.out.println(\"op1&lt;op2=\" + (op1 &lt; op2));\n        System.out.println(\"op1==op2=\" + (op1 == op2));\n        System.out.println(\"op1!=op2=\" + (op1 != op2));\n        System.out.println(\"'a'&gt;'b'=\" + (op3 &gt; op4));    \n    }\n</code></pre> <p>Resultado de ejecuci\u00f3n:</p> <p></p>"},{"location":"unidades/ud01/#453-logicos","title":"4.5.3 L\u00f3gicos","text":"Operador Formato Descripci\u00f3n &amp;&amp; <code>op1 &amp;&amp; op2</code> Y (AND) l\u00f3gico. <code>true</code> si ambos son <code>true</code>. || <code>op1 || op2</code> O (OR) l\u00f3gico. <code>true</code> si alguno es <code>true</code>. ! <code>! op1</code> Negaci\u00f3n l\u00f3gica (NOT). Devuelve <code>true</code> si es <code>false</code> op1. <p>Estos operadores act\u00faan sobre operadores o expresiones l\u00f3gicas, es decir, aquellos que se eval\u00faan a cierto o falso (true, false).</p> <pre><code>    public static void main(String[] args) {\n       boolean a, b, c, d;\n\n       a=true;\n       b=true;\n       c=false;\n       d=false;\n\n       System.out.println(\"true Y true =\" +  (a &amp;&amp; b));\n       System.out.println(\"true Y false =\" +  (a &amp;&amp; c));\n       System.out.println(\"false Y false =\" +  (c &amp;&amp; d));\n       System.out.println(\"true O true =\" +  (a || b));\n       System.out.println(\"true O false =\" +  (a || c));\n       System.out.println(\"false O false =\" +  (c || d));\n       System.out.println(\"No true =\" +  !a);\n       System.out.println(\"No false =\" +  !c);\n       System.out.println(\"(3 &gt; 4) Y true = \" + ((3&gt;4) &amp;&amp; a));\n\n    }\n</code></pre> <p>Resultado de ejecuci\u00f3n:</p> <p></p>"},{"location":"unidades/ud01/#454-asignacion","title":"4.5.4 Asignaci\u00f3n","text":"<p>El operador b\u00e1sico es <code>=</code>, pero se puede combinar con los aritm\u00e9ticos para abreviar:</p> Operador Equivalencia <code>+=</code> <code>a</code> = a + b <code>-=</code> <code>a = a - b</code> <code>*=</code> <code>a = a * b</code> <code>/=</code> <code>a = a / b</code> <p>Es posible combinar el operador de asignaci\u00f3n con otros operadores para, de forma abreviada, realizar un c\u00e1lculo y asignarlo a una variable:</p> Operador Formato Descripci\u00f3n += op1 += op2 op1 = op1 + op2 -= op1 -= op2 op1 = op1 - op2 *= op1 *= op2 op1 = op1 * op2 /= op1 /= op2 op1 = op1 / op2 %= op1 %= op2 op1 = op1 % op2 &amp;= op1 &amp;= op2 op1 = op1 &amp; op2 |= op1 |= ope2 op1 = op1 | ope2 ^= op1 ^= op2 op1 = op1 ^ op2 &gt;&gt;= op1 &gt;&gt;= op2 op1 = op1 &gt;&gt; op2 &lt;&lt;= op1 &lt;&lt;= op2 op1 = op1 &lt;&lt; op2 &gt;&gt;&gt;= op1 &gt;&gt;&gt;= op2 op1 = op1 &gt;&gt;&gt; op2"},{"location":"unidades/ud01/#455-expresiones","title":"4.5.5 Expresiones","text":"<p>Una expresi\u00f3n es la combinaci\u00f3n de varios operadores y operandos. Por ejemplo, tenemos las siguientes expresiones:</p> <pre><code>7 + 5 * 4 - 2\n10 + (1 % 5)\n(7 * x) &lt;= n\n</code></pre> <p>El lenguaje Java eval\u00faa las expresiones aplicando los operadores uno a uno siguiendo un orden espec\u00edfico.</p>"},{"location":"unidades/ud01/#456-precedencia-de-operadores","title":"4.5.6 Precedencia de operadores","text":"<p>Indica el orden en que se eval\u00faan. Aqu\u00ed un resumen de los m\u00e1s comunes (de mayor a menor prioridad):</p> <ol> <li>Operadores postfijos: [ ] . (par\u00e9ntesis)</li> <li>Operadores unarios: ++expr, --expr, -expr, ~ !</li> <li>Creaci\u00f3n o conversi\u00f3n de tipo: new (tipo)expr</li> <li>Multiplicaci\u00f3n y divisi\u00f3n: *, /, %</li> <li>Suma y resta: +, -</li> <li>Desplazamiento de bits: &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</li> <li>Relacionales: &lt;, &gt;, &lt;=, &gt;=</li> <li>Igualdad y desigualdad: ==, !=</li> <li>AND a nivel de bits: &amp;</li> <li>AND l\u00f3gico: &amp;&amp;</li> <li>XOR a nivel de bits: ^</li> <li>OR a nivel de bits: |</li> <li>OR l\u00f3gico: ||</li> <li>Operador condicional: ? :</li> <li>Asignaci\u00f3n: =, +=, -=, *=, /=, %=, ^=, &amp;=, |=, &gt;&gt;=, &lt;&lt;=</li> </ol>"},{"location":"unidades/ud01/#46-conversion-de-tipos","title":"4.6 Conversi\u00f3n de tipos","text":""},{"location":"unidades/ud01/#461-casting","title":"4.6.1 Casting","text":"<p>La conversi\u00f3n entre tipos primitivos se realiza mediante el casting. </p> <p>Java proporciona dos tipos de casting: impl\u00edcito y expl\u00edcito. El impl\u00edcito se realiza autom\u00e1ticamente mientras que el expl\u00edcito la tenemos que escribir nosotros.</p>"},{"location":"unidades/ud01/#casting-implicito","title":"Casting impl\u00edcito","text":"<p>El compilador realiza autom\u00e1ticamente el casting impl\u00edcito cuando el tipo al que se ha de convertir un dato es m\u00e1s amplio que el tipo original.</p> <p>Es decir, Java har\u00e1 el casting impl\u00edcito autom\u00e1ticamente cuando convertimos:</p> <ul> <li> <p>de char a int o de char a float</p> </li> <li> <p>de int a float</p> </li> </ul> <p></p> <p>Por ejemplo:</p> <pre><code>float foo = 'a';   // convertimos el char 'a' a float. El valor de foo sera 97.0f\n\nint bar = 'a';     // convertimos el char 'a' a int. EL valor de bar sera 97\n\nfloat baz = 97;    // convertimos el int 97 a float. El valor de baz sera 97.0f\n</code></pre> <p>Si tratamos de hacer un casting impl\u00edcito al rev\u00e9s, el compilador nos dar\u00e1 un error:</p> <pre><code>char bar = 65633;   // error, casting impl\u00edcito de int a char no permitido\n\nchar baz = 97f;   // error, casting impl\u00edcito de float a char no permitido\n\nint qux = 97f;    // error, casting impl\u00edcito de float a int no permitido\n</code></pre> <p>El casting con los tipos boolean y String no se puede realizar. </p>"},{"location":"unidades/ud01/#casting-explicito","title":"Casting explicito","text":"<p>Hemos visto que el casting impl\u00edcito no se puede realizar cuando queremos convertir a un tipo m\u00e1s estrecho (por ejemplo, convertir de float a int, ya que se pierden los decimales). </p> <p>Pero a veces necesitamos hacerlo, sabiendo que vamos a perder precisi\u00f3n. En este caso tenemos que explicitar el casting.</p> <p>Para realizar un casting expl\u00edcito, se debe escribir el tipo al que se quiere convertir entre par\u00e9ntesis, justo antes del valor que se quiere convertir.</p> <p>(tipo) valor</p> <p>Los siguientes ejemplos ilustran el uso del casting expl\u00edcito:</p> <pre><code>// de int a char\nchar bar = (char) 65633;   // bar es 97 (el valor m\u00e1ximo de char es 65535)\n\n// de float a char\nchar baz = (char) 97.53f;  // baz es 97, se pierden los decimales\n\n// de float a int\nint quux = (int) 14.67565f;  // quux es 14, se pierden los decimales\n</code></pre> <pre><code>// de int a char\nint fooa = 65633;\nchar bar = (char) fooa;   // bar es 97, el valor m\u00e1ximo de char es 65535\n\n// de float a char\nfloat foob = 97.53f;\nchar baz = (char) foob;  // baz es 97, se pierden los decimales\n\n// de float a int\nfloat fooc = 14.67565f;\nint quux = (int) fooc;  // quux es 14, se pierden los decimales\n</code></pre> <pre><code>float foo = 5 / 2;          // foo es 2.0f\n\nfloat bar = (float) 5 / 2;  // bar es 2.5f\n</code></pre>"},{"location":"unidades/ud01/#462-conversion-textual","title":"4.6.2 Conversi\u00f3n textual","text":"<p>Adem\u00e1s de las conversiones con casting, Java incorpora una serie de m\u00e9todos para hacer otras conversiones.</p>"},{"location":"unidades/ud01/#concatenacion","title":"Concatenaci\u00f3n","text":"<p>Se puede convertir cualquier valor en un String s\u00f3lo concatenando con un String vac\u00edo \"\".</p> <pre><code>String foo = \"\" + 'a';    // foo es \"a\"\nString bar = \"\" + 865;    // bar es \"865\"\nString baz = \"\" + 23.78f; // baz es \"23.78\"\nString quux = \"\" + true;  // quux es \"true\"\n</code></pre>"},{"location":"unidades/ud01/#stringvalueof","title":"String.valueOf()","text":"<p>De forma equivalente a la concatenaci\u00f3n, se puede utilizar el m\u00e9todo String.valueOf () para convertir a String.</p> <pre><code>String foo = String.valueOf('a');    // foo es \"a\"\nString bar = String.valueOf(865);    // bar es \"865\"\nString baz = String.valueOf(23.78f); // baz es \"23.78\"\nString quux = String.valueOf(true);  // quux es \"true\"\n</code></pre>"},{"location":"unidades/ud01/#charat","title":"charAt()","text":"<p>L\u00f3gicamente, no podemos convertir un String en un char, ya que el String puede tener varios caracteres. Pero podemos usar el m\u00e9todo charAt() para obtener un caracter que est\u00e9 en una determinada posici\u00f3n.</p> <pre><code>char foo = \"java8\".charAt(0);  // foo es 'j'\nchar baz = \"java8\".charAt(4);  // baz es '8'\n</code></pre> <p>Hay que tener en cuenta que las posiciones empiezan por 0.</p>"},{"location":"unidades/ud01/#charactergetnumericvalue","title":"Character.getNumericValue()","text":"<p>En el punto anterior hemos visto que si hacemos el casting impl\u00edcito para convertir un char en un int, obtenemos el valor Unicode del car\u00e1cter.</p> <p>Si queremos obtener el valor que representa el caracter se puede hacer con el m\u00e9todo Character.getNumericValue ().</p> <pre><code>char foo = '9';\n\nint bar = foo; // bar es 57, con el casting obtenemos el valor unicode\n\nint baz = Character.getNumericValue(foo); // baz se 9, obtenemos el valor representado por el caracter\n</code></pre>"},{"location":"unidades/ud01/#parseint-y-parsefloat","title":"parseInt() y parseFloat()","text":"<p>Para obtener el valor num\u00e9rico representado por un String podemos utilizar parseInt () o parseFloat ().</p> <pre><code>String foo = \"213\";\n\nint bar = Integer.parseInt(foo);  // bar es 213\n</code></pre> <pre><code>String foo = \"23.78\";\n\nfloat bar = Float.parseFloat(foo);  // bar es 23.78f\n</code></pre>"},{"location":"unidades/ud01/#47-la-clase-math","title":"4.7 La clase Math","text":"<p>Se echan de menos operadores matem\u00e1ticos m\u00e1s potentes en Java. Por ello se ha incluido una clase especial llamada Math dentro del paquete java.lang.</p> <p>Esta clase posee muchos m\u00e9todos muy interesantes para realizar c\u00e1lculos matem\u00e1ticos complejos como c\u00e1lculo de potencias, ra\u00edces cuadradas, valores absolutos, seno, coseno, etc.</p> <p>Por ejemplo:</p> <pre><code>double x = Math.pow(3,3);    // Potencia 3 ^ 3\n\ndouble y = Math.sqrt(9);    // Ra\u00edz cuadrada de 9\n</code></pre> <p>Tambi\u00e9n posee constantes como:</p> <pre><code>double PI; // El n\u00famero \u03a0 (3,14159265\u2026)\n\ndouble E; // El n\u00famero e (2, 7182818245...)\n</code></pre> <p>Algunos ejemplos de otros m\u00e9todos:</p> <p></p>"},{"location":"unidades/ud01/#4-8-literales","title":"4. 8 Literales","text":"<p>A la hora de tratar con valores de los tipos de datos simples se utiliza lo que se denomina literales. Son los valores fijos que escribimos directamente en el c\u00f3digo.</p> <ul> <li>L\u00f3gicos: <code>true</code>, <code>false</code>.</li> <li>Enteros: <code>10</code> (decimal), <code>012</code> (octal, empieza por 0), <code>0xA</code> (hexadecimal, empieza por 0x). Para <code>long</code>, se a\u00f1ade una <code>L</code> al final: <code>1234567890L</code>.</li> <li>Reales: <code>12.34</code>. Por defecto son <code>double</code>. Para <code>float</code>, se a\u00f1ade <code>f</code>: <code>12.34f</code>.</li> <li>Car\u00e1cter: Entre comillas simples: <code>'a'</code>. Usan secuencias de escape para caracteres especiales: <code>'\\n'</code> (nueva l\u00ednea), <code>'\\t'</code> (tabulador).</li> <li>Cadenas: Entre comillas dobles: <code>\"Hola mundo\"</code>.</li> </ul>"},{"location":"unidades/ud01/#481-literales-logicos","title":"4.8.1 Literales l\u00f3gicos","text":"<p>Son \u00fanicamente dos, las palabras reservadas true y false.</p>"},{"location":"unidades/ud01/#482-literales-enteros","title":"4.8.2 Literales enteros","text":"<p>Los literales de tipo entero: byte, short, int y long pueden expresarse en decimal (base 10), octal (base 8) o hexadecimal (base 16). </p> <p>Adem\u00e1s, puede a\u00f1adirse al final del mismo la letra L para indicar que el entero es considerado como long (64bits).</p> <p>En Java, el compilador identifica un entero decimal (base 10) al encontrar un n\u00famero cuyo primer d\u00edgito es cualquier s\u00edmbolo decimal excepto el cero (del 1 al 9). A continuaci\u00f3n pueden aparecer d\u00edgitos del 0 al 9.</p> <p>La letra L al final de un literal de tipo entero puede aplicarse a cualquier sistema de numeraci\u00f3n e indica que el n\u00famero decimal sea tratado como un entero largo (de 64 bits). Esta letra L puede ser may\u00fascula o min\u00fascula, aunque es aconsejable utilizar la may\u00fascula ya que de lo contrario puede confundirse con el d\u00edgito uno (1) en los listados.</p> <p>Ejemplo:</p> <p><code>long max1 = 9223372036854775807L;  //valor m\u00e1ximo para un entero largo</code></p>"},{"location":"unidades/ud01/#483-literales-reales","title":"4.8.3 Literales reales","text":"<p>Los literales de tipo real sirven para indicar valores float o double. A diferencia de los literales de tipo entero, no pueden expresarse en octal o hexadecimal.</p> <p>Existen dos formatos de representaci\u00f3n: mediante su parte entera, el punto decimal ( . ) y la parte fraccionaria; o mediante notaci\u00f3n exponencial o cient\u00edfica:</p> <p>Ejemplos equivalentes:</p> <p>3.1415 0.31415e1 .31415e1 0.031415E+2 .031415e2 314.15e-2 31415E-4</p> <p>Al igual que los literales que representan enteros, se puede poner una letra como sufijo. Esta letra puede ser una F o una D (may\u00fascula o min\u00fascula indistintamente).</p> <p>F: Trata el literal como de tipo float.</p> <p>D: Trata el literal como de tipo double.</p> <p>Ejemplo:</p> <p>3.1415F</p> <p>.031415d</p>"},{"location":"unidades/ud01/#484-literales-caracter","title":"4.8.4 Literales car\u00e1cter","text":"<p>Los literales de tipo car\u00e1cter se representan siempre entre comillas simples. Entre las comillas simples puede aparecer:</p> <p>Un s\u00edmbolo (letra) siempre que el car\u00e1cter est\u00e9 asociado a un c\u00f3digo Unicode. Ejemplos: 'a' , 'B' , '{' , '\u00f1' , '\u00e1' .</p> <p>Las \"secuencias de escape\" son combinaciones del s\u00edmbolo contrabarra ** seguido de una letra. Sirven para representar caracteres que no tienen una equivalencia en forma de s\u00edmbolo.</p> <p>Las posibles secuencias de escape son:</p> <p>\u200b    \\n: Nueva Linea.</p> <p>\u200b   \\t : Tabulador.</p> <p>\u200b   \\r: Retroceso de Carro.</p> <p>\u200b   \\f: Comienzo de Pagina.</p> <p>\u200b   \\b: Borrado a la Izquierda.</p> <p>\u200b   \\\\: El car\u00e1cter barra inversa ( \\ ).</p> <p>\u200b   \\' : El car\u00e1cter prima simple ( ' ).</p> <p>\u200b   \\\" : El car\u00e1cter prima doble o bi-prima ( \" ).</p> <p>Por ejemplo:</p> <ul> <li> <p>Para imprimir una diagonal inversa se utiliza: \\\\</p> </li> <li> <p>Para imprimir comillas dobles en un String se utiliza: \\\"</p> </li> </ul>"},{"location":"unidades/ud01/#485-literales-cadenas","title":"4.8.5 Literales cadenas","text":"<p>Los Strings o cadenas de caracteres no forman parte de los tipos de datos elementales en Java. Son instanciados a partir de la clase java.lang.String pero aceptan su inicializaci\u00f3n a partir de literales de este tipo, por lo que se tratan en este punto.</p> <p>Un literal de tipo string va encerrado entre comillas dobles ( \" ) y debe estar incluido completamente en una sola l\u00ednea del programa fuente (no puede dividirse en varias l\u00edneas).</p> <p>Entre las comillas dobles puede incluirse cualquier car\u00e1cter del c\u00f3digo Unicode (o su c\u00f3digo precedido del car\u00e1cter \\ )  adem\u00e1s de las secuencias de escape vistas anteriormente en los literales de tipo car\u00e1cter.</p> <p>As\u00ed, por ejemplo, para incluir un cambio de l\u00ednea dentro de un literal de tipo String deber\u00e1 hacerse mediante la secuencia de escape \\n :</p> <p>Ejemplo:</p> <pre><code>System.out.println(\"Primera l\u00ednea\\nSegunda l\u00ednea del string\\n\");\nSystem.out.println(\"Hola\");\n</code></pre> <p>La visualizaci\u00f3n del string anterior mediante println() producir\u00eda la siguiente salida por pantalla:</p> <pre><code>Primera l\u00ednea\n\nSegunda l\u00ednea del string\n\nHola\n</code></pre> <p>La forma de incluir los caracteres: comillas dobles ( \" ) y contrabarra ( \\ ) es mediante las secuencias de escape \\\\\" y \\\\ respectivamente (o mediante su c\u00f3digo Unicode precedido de \\ ).</p> <p>Si el string es demasiado largo y debe dividirse en varias l\u00edneas en el fichero fuente, puede utilizarse el operador de concatenaci\u00f3n de strings (+) de la siguiente forma:</p> <p>```java \"Este String es demasiado largo para estar en una l\u00ednea del \" </p> <ul> <li>\"fichero fuente y se ha dividido en dos.\" ```</li> </ul>"},{"location":"unidades/ud01/#49-salida-y-entrada-estandar","title":"4.9 Salida y Entrada Est\u00e1ndar","text":""},{"location":"unidades/ud01/#491-salida-estandar","title":"4.9.1 Salida est\u00e1ndar","text":"<p>Usamos <code>System.out</code> para imprimir texto:</p> <ul> <li><code>System.out.print(\"...\")</code>: Imprime el texto sin salto de l\u00ednea al final.</li> <li><code>System.out.println(\"...\")</code>: Imprime el texto y a\u00f1ade un salto de l\u00ednea.</li> </ul> <p>La utilizaci\u00f3n de <code>System.err</code> ser\u00eda totalmente an\u00e1loga para enviar los mensajes producidos por errores en la ejecuci\u00f3n.</p> <p>Por ejemplo, para presentar el mensaje de saludo habitual por pantalla:</p> <pre><code>    public static void main(String[] args) {\n        System.out.print(\"HOLA \");\n        System.out.println(\"mundo\");\n        System.out.println(\"Mensaje de error\");\n    }\n</code></pre> <p>La salida ser\u00eda la siguiente:</p> <pre><code>HOLA mundo\nMensaje de error\n</code></pre> <p>Podemos concatenar texto y variables con el operador <code>+</code>:</p> <pre><code>    public static void main(String[] args) {\n\n        String nombre = \"\u00c1lex\";\n        int edad = 25;\n\n        System.out.println(nombre);\n        System.out.println(edad);\n        System.out.println(nombre +\" tiene \"+edad+\" a\u00f1os\");\n    }\n</code></pre> <p>Y la salida ser\u00eda la siguiente:</p> <p></p>"},{"location":"unidades/ud01/#492-entrada-estandar-lectura-del-teclado","title":"4.9.2 Entrada est\u00e1ndar (lectura del teclado)","text":"<p>La entrada est\u00e1ndar (leer informaci\u00f3n del teclado, escrita por el usuario) es un poco m\u00e1s compleja. Hay varias formas de hacerlo pero la m\u00e1s sencilla es utilizar la clase Scanner.</p> <p>Usaremos la clase <code>Scanner</code>, que simplifica mucho la lectura de datos.</p> <ol> <li>Importar la clase: Al principio del fichero, hay que a\u00f1adir <code>import java.util.Scanner;</code>.</li> <li>Crear un objeto Scanner: Dentro del m\u00e9todo <code>main</code>, creamos una \u00fanica instancia que leer\u00e1 del teclado (<code>System.in</code>). <code>Scanner sc = new Scanner(System.in);</code></li> <li>Usar sus m\u00e9todos para leer:    - <code>sc.nextLine()</code>: Lee una l\u00ednea completa de texto (hasta el Enter). Devuelve un <code>String</code>.    - <code>sc.nextInt()</code>: Lee un n\u00famero entero. Devuelve un <code>int</code>.    - <code>sc.nextDouble()</code>: Lee un n\u00famero real. Devuelve un <code>double</code>.    - Y muchos m\u00e1s: <code>nextByte()</code>, <code>nextFloat()</code>, etc.</li> </ol> <pre><code>Scanner sc = new Scanner(System.in);\n</code></pre> <p>En este ejemplo hemos creado un objeto Scanner llamado sc pero podr\u00edamos ponerle cualquier nombre. </p> <p>Ahora podremos utilizar sc tantas veces como queramos para leer informaci\u00f3n del teclado.</p> <p>Por ejemplo:</p> <pre><code>String texto = sc.nextLine();\n</code></pre> <p>El m\u00e9todo sc.nextLine() recoger\u00e1 el texto que el usuario escriba por teclado (hasta presionar la tecla Intro) y lo guardar\u00e1 en texto (de tipo String).</p> <p>Existen mucho otros m\u00e9todos seg\u00fan el tipo de dato que se quiera leer:</p> <ul> <li>nextByte(): obtiene un n\u00famero entero tipo byte.</li> <li>nextShort(): obtiene un n\u00famero entero tipo short.</li> <li>nextInt(): obtiene un n\u00famero entero tipo int.</li> <li>nextLong(): obtiene un n\u00famero entero tipo long.</li> <li>nextFloat(): obtiene un n\u00famero real float.</li> <li>nextDouble(): obtiene un n\u00famero real double.</li> <li>nextBoolean(): obtiene un valor boolean.</li> <li>next(): obtiene el siguiente token (texto hasta un espacio).</li> </ul> <p>PRECAUCI\u00d3N Para poder utilizar la clase Scanner es necesario importarla desde el paquete java.util de Java. Es decir, arriba del todo (antes del public class ) hay que escribir la siguiente sentencia:</p> <p><code>java import java.util.Scanner;</code></p> <p>Ejemplo completo:</p> <pre><code>import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        String nombre;\n\n        Scanner sc = new Scanner(System.in);\n\n        System.out.println(\"Introduce tu nombre: \");\n\n        nombre = sc.nextLine();\n\n        System.out.println(\"\u00a1Hola \" + nombre + \"!\");\n    }\n\n}\n</code></pre> <p>Salida:</p> <p></p> <p>Ejemplo en el que leemos un valor tipo double. El programa pide al usuario que introduzca el radio de un c\u00edrculo, luego calcula su \u00e1rea y circunferencia, por \u00faltimo lo muestra por pantalla.</p> <pre><code>import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n\n        double radio, area, circunferencia;\n\n        Scanner sc = new Scanner(System.in);\n\n        System.out.println(\"Introduce el radio: \");\n\n        radio = sc.nextDouble();\n\n        // Se hace uso de la libreria Math para hacer uso de PI y la potencia (pow)\n\n        area = Math.PI * Math.pow(radio, 2);\n\n        circumferencia = 2 * Math.PI * radio;\n\n        System.out.println(\"El area es \" + area);\n\n        System.out.println(\"La circumferencia es \" + circunferencia);\n    }\n\n}\n</code></pre> <p>Y su salida:</p> <p></p> <p>\u00a1El error m\u00e1s com\u00fan de 1\u00ba de DAM! El <code>Scanner</code> y el salto de l\u00ednea fantasma.</p> <p>Cuando lees un n\u00famero con <code>nextInt()</code>, <code>nextDouble()</code>, etc., el <code>Scanner</code> consume los d\u00edgitos del n\u00famero, pero deja el \"Enter\" (el salto de l\u00ednea <code>\\n</code>) en el buffer de entrada.</p> <p>Si la siguiente instrucci\u00f3n es un <code>nextLine()</code>, este leer\u00e1 ese \"Enter\" vac\u00edo y parecer\u00e1 que se ha saltado la lectura.</p> <p>Soluci\u00f3n: Despu\u00e9s de leer un n\u00famero y antes de leer una l\u00ednea de texto, consume el salto de l\u00ednea sobrante con un <code>sc.nextLine();</code> extra.</p> <pre><code>System.out.print(\"Introduce tu edad: \");\nint edad = sc.nextInt(); // Lee s\u00f3lo d\u00edgitos enteros\nsc.nextLine(); // Limpia el '\\n' que qued\u00f3 en el buffer\n</code></pre>"},{"location":"unidades/ud02/","title":"Unidad 2 - Programaci\u00f3n estructurada. Estructuras de control y repetici\u00f3n.","text":"Fecha Versi\u00f3n Descripci\u00f3n 14/09/2021 1.0.0 Versi\u00f3n inicial 27/09/2021 1.0.1 Correcci\u00f3n de erratas 05/10/2021 1.0.2 Se a\u00f1ade el tratamiento de String 08/10/2021 1.0.3 Correcci\u00f3n de erratas en ejemplos de recorridos. Implementaci\u00f3n en Java de ejemplos que faltaban. 16/09/2025 1.1.0 Versi\u00f3n revisada"},{"location":"unidades/ud02/#1-introduccion-construyendo-programas-solidos","title":"1 Introducci\u00f3n: Construyendo programas s\u00f3lidos","text":"<p>En esta unidad vamos a sentar las bases para crear programas que no solo funcionen, sino que sean claros, sencillos de mantener y f\u00e1ciles de ampliar. Para ello, nos apoyaremos en dos pilares fundamentales: la Programaci\u00f3n Modular y la Programaci\u00f3n Estructurada.</p>"},{"location":"unidades/ud02/#2-programacion-modular-construyendo-con-piezas-de-lego","title":"2 Programaci\u00f3n Modular: Construyendo con piezas de LEGO","text":"<p>Imagina que quieres construir un castillo de LEGO. No empiezas uniendo piezas al azar, \u00bfverdad? Lo m\u00e1s probable es que construyas primero las torres, luego las murallas, el puente... y finalmente lo unes todo.</p> <p>La programaci\u00f3n modular aplica exactamente esa idea: consiste en dividir un programa grande y complejo en partes m\u00e1s peque\u00f1as e independientes, llamadas m\u00f3dulos.</p> <p></p> <p>Un m\u00f3dulo es un fragmento de c\u00f3digo que resuelve una parte muy concreta del problema. Cada m\u00f3dulo se puede programar y probar por separado, como si fuera una pieza de LEGO.</p> <p>Esta t\u00e9cnica, tambi\u00e9n conocida como dise\u00f1o Top-Down (de lo general a lo particular), nos aporta enormes ventajas:</p> <ul> <li>Claridad: Es m\u00e1s f\u00e1cil entender un programa dividido en partes l\u00f3gicas.</li> <li>Reutilizaci\u00f3n: Un mismo m\u00f3dulo (una torre de LEGO) puede usarse en diferentes castillos.</li> <li>Facilidad de depuraci\u00f3n: Si una torre se cae, solo tienes que revisar esa pieza, no el castillo entero.</li> <li>Trabajo en equipo: Diferentes programadores pueden trabajar en distintos m\u00f3dulos a la vez.</li> </ul>"},{"location":"unidades/ud02/#3-programacion-estructurada-las-reglas-de-trafico-del-codigo","title":"3 Programaci\u00f3n Estructurada: Las reglas de tr\u00e1fico del c\u00f3digo","text":"<p>Si la programaci\u00f3n modular nos dice \"divide y vencer\u00e1s\", la programaci\u00f3n estructurada nos dice c\u00f3mo construir cada una de esas divisiones.</p> <p>Se basa en el famoso Teorema de la Estructura, que demuestra algo asombroso: cualquier programa, por complejo que sea, puede construirse usando \u00fanicamente tres tipos de estructuras de control. Pi\u00e9nsalo como las reglas de tr\u00e1fico del c\u00f3digo:</p> <ol> <li>Estructura Secuencial (una calle de sentido \u00fanico): Las instrucciones se ejecutan una detr\u00e1s de otra, en orden.</li> <li>Estructura Condicional (una bifurcaci\u00f3n): El programa llega a un cruce y debe decidir qu\u00e9 camino tomar en funci\u00f3n de una condici\u00f3n (<code>if-else</code>).</li> <li>Estructura Repetitiva (una rotonda): El programa ejecuta un bloque de c\u00f3digo una y otra vez hasta que se cumple una condici\u00f3n para salir (<code>while</code>, <code>for</code>).</li> </ol> <p>Estas tres estructuras son los \u00fanicos ladrillos que necesitamos para construir cualquier algoritmo.</p> <p>El Teorema de la estructura fue formulado por Bohn y Jacopini y dice as\u00ed: \u201cTodo programa propio, es decir, con un solo punto de entrada y un solo punto de salida, puede ser escrito utilizando \u00fanicamente tres tipos de estructuras de control: Estructura secuencial, condicional y repetitiva\u201d</p>"},{"location":"unidades/ud02/#4-el-algoritmo-el-plano-de-nuestra-construccion","title":"4 El Algoritmo: El plano de nuestra construcci\u00f3n","text":"<p>Recordemos que un algoritmo es el plano detallado para resolver un problema, una serie de pasos claros y finitos. Para representar estos planos, usaremos dos herramientas:</p> <ul> <li>Diagrama de flujo: Una representaci\u00f3n gr\u00e1fica con s\u00edmbolos y flechas. Muy visual.</li> <li>Pseudoc\u00f3digo: Un lenguaje intermedio, a medio camino entre el lenguaje humano y el c\u00f3digo, que nos permite centrarnos en la l\u00f3gica sin preocuparnos por la sintaxis estricta.</li> </ul> <p>Un buen algoritmo debe ser sencillo y eficiente (usar el m\u00ednimo tiempo y memoria posibles).</p> <p>Los elementos que tiene un algoritmo son:</p> <ul> <li>Instrucciones</li> <li>De entrada</li> <li>De salida</li> <li>De asignaci\u00f3n</li> <li>Estructuras de control</li> <li>Bifurcaciones</li> <li>Repeticiones</li> </ul>"},{"location":"unidades/ud02/#5-elementos-de-un-algoritmo","title":"5 Elementos de un algoritmo","text":""},{"location":"unidades/ud02/#51-inicio-y-fin","title":"5.1 Inicio y Fin","text":"<p>Todo algoritmo tiene un punto de partida y un final claros. Al menos existir\u00e1n estos bloques:</p> <ul> <li>NOMBRE DEL ALGORITMO. El nombre con el que lo bautizamos para reconocer su prop\u00f3sito.</li> <li>INCIO. Punto de entrada del algoritmo.</li> <li>FIN. Finalizaci\u00f3n del algoritmo.</li> </ul> <p></p> <ul> <li>Pseudoc\u00f3digo: Usamos las palabras <code>ALGORITMO Nombre</code>, <code>INICIO</code> y <code>FIN</code>.</li> <li>Java: Usamos las llaves <code>{}</code> para delimitar los bloques de c\u00f3digo, como el inicio y fin de una clase o de un m\u00e9todo.</li> </ul> <pre><code>public class HolaMundo { // INICIO de la clase\n    public static void main(String[] args) { // INICIO del m\u00e9todo principal\n        System.out.println(\"Hola Mundo\");\n    } // FIN del m\u00e9todo principal\n} // FIN de la clase\n</code></pre>"},{"location":"unidades/ud02/#52-instrucciones-de-asignacion","title":"5.2 Instrucciones de asignaci\u00f3n","text":"<p>Una asignaci\u00f3n consiste en guardar un valor en una variable. Su representaci\u00f3n ser\u00eda en un rect\u00e1ngulo.</p> <p></p> <p>En pseudoc\u00f3digo, definiremos las variables y constantes en bloques <code>VAR</code> y <code>CONST</code> antes del <code>INICIO</code>.</p> <ul> <li>CONSTANTES: Su valor no cambia. Por convenio, en may\u00fasculas.</li> <li>VARIABLES: Su valor puede cambiar.</li> </ul> <p>Ejemplo de declaraci\u00f3n en pseudoc\u00f3digo: <pre><code>ALGORITMO EjemploTipos\nCONST\n    REAL PI = 3.1416\nVAR\n    ENTERO edad = 0\n    CADENA nombre = \" \"\n    BOOLEANO esAlumno = VERDADERO\nINICIO\n    // ... cuerpo del algoritmo\nFIN\n</code></pre></p>"},{"location":"unidades/ud02/#53-instrucciones-de-entrada-y-salida","title":"5.3 Instrucciones de Entrada y Salida","text":"<p>Son la forma en que nuestro programa se comunica con el exterior (normalmente, el usuario).</p> <ul> <li>Entrada: Leer datos del teclado. (<code>LEER</code> en pseudoc\u00f3digo, <code>Scanner</code> en Java).</li> <li>Salida: Mostrar informaci\u00f3n en pantalla. (<code>ESCRIBIR</code> en pseudoc\u00f3digo, <code>System.out.println</code> en Java).</li> </ul> <p>Las instrucciones de entrada y salida se representan con figuras romboides o trapecios.</p> <p>Representaci\u00f3n en un diagrama de flujo:</p> <p></p> <p>Ejemplo de algoritmo completo: <pre><code>ALGORITMO CalculoAreaCirculo\nVAR\n    REAL radio = 0.0\n    REAL area = 0.0\nINICIO\n    ESCRIBIR(\"Indica el radio del c\u00edrculo:\")\n    LEER(radio)\n    area = PI * radio * radio // Suponiendo que PI es una constante ya definida\n    ESCRIBIR(\"El \u00e1rea del c\u00edrculo es: \", area)\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>import java.util.Scanner;\n\npublic class CalculoAreaCirculo {\n    public static void main(String[] args) {\n        Scanner teclado = new Scanner(System.in);\n\n        System.out.print(\"Indica el radio del c\u00edrculo: \");\n        double radio = teclado.nextDouble();\n\n        double area = Math.PI * Math.pow(radio, 2);\n\n        System.out.println(\"El \u00e1rea del c\u00edrculo es: \" + area);        \n    }    \n}\n</code></pre></p>"},{"location":"unidades/ud02/#54-estructuras-alternativas-condicionales","title":"5.4 Estructuras Alternativas (Condicionales)","text":"<p>Son las bifurcaciones de nuestro c\u00f3digo. Permiten ejecutar un bloque de instrucciones u otro en funci\u00f3n de si una condici\u00f3n es verdadera o falsa.</p> <p></p>"},{"location":"unidades/ud02/#541-condicional-if-simple","title":"5.4.1 Condicional <code>if</code> (Simple)","text":"<p>Ejecuta un bloque de c\u00f3digo solo si la condici\u00f3n es verdadera.</p> <p></p> <p>Por ejemplo, queremos definir un algoritmo que solicite una edad al usuario. Si la edad es mayor o igual a 18 indicar\u00e1 por pantalla el texto \"Mayor de edad\" en caso contrario, no hara nada.</p> <p>Su diagrama ser\u00eda el siguiente:</p> <p></p> <p>Su pseudoc\u00f3digo:</p> <p><pre><code>ALGORITMO MayoriaEdad\nVAR\n    ENTERO edad\nINICIO\n    ESCRIBIR(\"Introduce tu edad:\")\n    LEER(edad)\n    SI (edad &gt;= 18) ENTONCES\n        ESCRIBIR(\"Mayor de edad.\")\n    FIN SI\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>import java.util.Scanner;\n\npublic class MayoriaEdad {\n\n    public static void main(String[] args) {\n         // Inicializamos la variable\n        int edad = 0;\n        // Creamos el objeto que nos permite la entrada por teclado\n        Scanner entrada = new Scanner(System.in);\n\n        // Escribimos un mensaja de peticion de edad\n        System.out.println(\"Introduce tu edad: \");\n        // Lectura por teclado de la edad\n        edad = entrada.nextInt();\n        // Comprobamos que la edad es mayor o igual a 18\n        if(edad &gt;= 18) {\n            System.out.println(\"Mayor de edad.\");\n        }        \n    }    \n}\n</code></pre></p>"},{"location":"unidades/ud02/#542-condicional-if-else-doble","title":"5.4.2 Condicional <code>if-else</code> (Doble)","text":"<p>Proporciona un camino alternativo a ejecutar si la condici\u00f3n es falsa. Es decir, si la condici\u00f3n se eval\u00faa a <code>true</code> ejecuta unas instrucciones y si se eval\u00faa como <code>false</code> ejecuta otras instrucciones.</p> <p></p> <p>Siguendo con el ejemplo anterior, queremos mostrar por pantalla el mensaje \"Eres menor de edad\" si la condici\u00f3n es falsa.</p> <p></p> <p>Ejemplo:</p> <p><pre><code>ALGORITMO MayoriaEdadDoble\nVAR\n    ENTERO edad\nINICIO\n    ESCRIBIR(\"Introduce tu edad:\")\n    LEER(edad)\n    SI (edad &gt;= 18) ENTONCES\n        ESCRIBIR(\"Eres mayor de edad.\")\n    SINO\n        ESCRIBIR(\"Eres menor de edad.\")\n    FIN SI\nFIN\n</code></pre> Implementaci\u00f3n en Java:</p> <pre><code>// S\u00f3lo mostramos el c\u00f3digo modificado\n\nedad = teclado.nextInt();\nif (edad &gt;= 18) {\n    System.out.println(\"Eres mayor de edad.\");\n} else {\n    System.out.println(\"Eres menor de edad.\");\n}\n</code></pre>"},{"location":"unidades/ud02/#543-condicional-if-else-if-else-anidada","title":"5.4.3 Condicional <code>if else-if else</code> (Anidada)","text":"<p>Permite encadenar varias condiciones. El programa eval\u00faa cada condici\u00f3n en orden y ejecuta el primer bloque cuyo resultado sea verdadero.</p> <p></p> <p>A\u00f1adimos una nueva modificacion al algoritmo anterior. Si la edad le\u00edda es menor de 6 mostramos \"Eres un/a ni\u00f1o/a peque\u00f1o/a\".</p> <p></p> <p>Ejemplo:</p> <p><pre><code>ALGORITMO ClasificarEdad\nVAR\n    ENTERO edad\nINICIO\n    ESCRIBIR(\"Introduce tu edad:\")\n    LEER(edad)\n    SI (edad &gt;= 18) ENTONCES\n        ESCRIBIR(\"Eres mayor de edad.\")\n    SINO SI (edad &lt; 6) ENTONCES\n        ESCRIBIR(\"Eres un/a ni\u00f1o/a peque\u00f1o/a.\")\n    SINO\n        ESCRIBIR(\"Eres menor de edad.\")\n    FIN SI\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>edad = teclado.nextInt();\nif (edad &gt;= 18) {\n    System.out.println(\"Eres mayor de edad.\");\n} else if (edad &lt; 6) {\n        System.out.println(\"Eres una/a ni\u00f1o/a peque\u00f1o/a.\");\n} else {\n    System.out.println(\"Eres menor de edad.\");  \n}\n</code></pre></p>"},{"location":"unidades/ud02/#ejemplo-avanzado-de-anidacion-condiciones-de-distinto-tipo","title":"Ejemplo Avanzado de Anidaci\u00f3n: Condiciones de distinto tipo","text":"<p>Un <code>if</code> anidado no tiene por qu\u00e9 evaluar el mismo tipo de dato. Podemos anidar una comprobaci\u00f3n sobre una variable booleana dentro de una comprobaci\u00f3n num\u00e9rica, creando l\u00f3gicas m\u00e1s complejas.</p> <p>Ejemplo: Control de acceso a un evento. Un menor de edad solo puede entrar si va acompa\u00f1ado.</p> <p><pre><code>ALGORITMO PermisoEntrada\nVAR\n    ENTERO edad\n    BOOLEANO vieneAcompanado\nINICIO\n    ESCRIBIR(\"Introduce tu edad:\")\n    LEER(edad)\n\n    SI (edad &gt;= 18) ENTONCES\n        ESCRIBIR(\"Puedes pasar.\")\n    SINO\n        ESCRIBIR(\"Eres menor de edad. \u00bfVienes acompa\u00f1ado por un adulto? (VERDADERO/FALSO)\")\n        LEER(vieneAcompanado)\n        SI (vieneAcompanado == VERDADERO) ENTONCES\n            ESCRIBIR(\"Puedes pasar con tu acompa\u00f1ante.\")\n        SINO\n            ESCRIBIR(\"Lo sentimos, no puedes pasar sin un acompa\u00f1ante.\")\n        FIN SI\n    FIN SI\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>// Suponiendo 'teclado' como un objeto Scanner ya creado\nSystem.out.print(\"Introduce tu edad: \");\nint edad = teclado.nextInt();\n\nif (edad &gt;= 18) {\n    System.out.println(\"Puedes pasar.\");\n} else {\n    System.out.print(\"Eres menor de edad. \u00bfVienes acompa\u00f1ado por un adulto? (true/false): \");\n    boolean vieneAcompanado = teclado.nextBoolean();\n    if (vieneAcompanado) {\n        System.out.println(\"Puedes pasar con tu acompa\u00f1ante.\");\n    } else {\n        System.out.println(\"Lo sentimos, no puedes pasar sin un acompa\u00f1ante.\");\n    }\n}\n</code></pre></p>"},{"location":"unidades/ud02/#544-condicional-switch-multiple","title":"5.4.4 Condicional <code>switch</code> (M\u00faltiple)","text":"<p>Es una alternativa al <code>if-else if</code> cuando queremos comparar una \u00fanica variable con una lista de valores muy concretos. </p> <p></p> <p>Imaginemos que queremos que usuario inserte una vocal m\u00e1yuscula y nuestro programa tiene que comprobar qu\u00e9 vocal es. Su diagrama podr\u00edas ser este:</p> <p></p> <p>Su pseudoc\u00f3digo:</p> <pre><code>ALGORITMO VOCAL\nVAR\n  CARACTER vocal;\nINICIO\n  ESCRIBIR(\"Dame una vocal: \");\n  LEER(vocal);\n  SEG\u00daN VALOR(vocal):\n    VALOR 'A': ESCRIBIR(\"Es la A\");\n    VALOR 'E': ESCRIBIR(\"Es la E\");\n    VALOR 'I': ESCRIBIR(\"Es la I\");\n    VALOR 'O': ESCRIBIR(\"Es la O\");\n    VALOR 'U': ESCRIBIR(\"Es la U\");\n    DEFAULT: ESCRIBIR(\"No es una vocal\");\n  FIN SEG\u00daN\nFIN ALGORITMO\n</code></pre> <p>Su c\u00f3digo en Java:</p> <pre><code>import java.util.Scanner;\n\npublic class Vocal {\n\n    public static void main(String[] args) {\n        // Pedimos la vocal\n        System.out.println(\"Dame una vocal: \");\n        // Creamos el objeto que nos permite la entrada por teclado\n        Scanner entrada = new Scanner(System.in);\n        // Definimos la variable\n        char vocal;\n        // Lectura por teclado de la vocal. Como la clase scanner no tiene para\n        // leer un solo caracter pedimos un string y de ese string obtenemos el primer caracter\n        vocal = entrada.next().charAt(0);\n        // Definimos el switch\n        switch (vocal) {\n            //Case statements  \n            case 'A':\n                System.out.println(\"Es la 'A'\");\n                break;\n            case 'E':\n                System.out.println(\"Es la 'E'\");\n                break;\n            case 'I':\n                System.out.println(\"Es la 'I'\");\n                break;\n            case 'O':\n                System.out.println(\"Es la 'O'\");\n                break;\n            case 'U':\n                System.out.println(\"Es la 'U'\");\n                break;                \n            // Valor por defecto\n            default:\n                System.out.println(\"No es una vocal\");\n                break;\n        }\n    }\n}\n</code></pre> <p>Un uso muy t\u00edpico se da cuando creamos men\u00fas con distintas opciones.</p> <p>Ejemplo:</p> <pre><code>ALGORITMO MenuOpciones\nVAR\n    ENTERO opcion\nINICIO\n    ESCRIBIR(\"Elige una opci\u00f3n (1-3):\")\n    LEER(opcion)\n    SEGUN (opcion) HACER\n        CASO 1: ESCRIBIR(\"Has elegido 'Ver perfil'\")\n        CASO 2: ESCRIBIR(\"Has elegido 'Editar cuenta'\")\n        CASO 3: ESCRIBIR(\"Has elegido 'Cerrar sesi\u00f3n'\")\n        DE OTRO MODO: ESCRIBIR(\"Opci\u00f3n no v\u00e1lida.\")\n    FIN SEGUN\nFIN\n</code></pre> <p>Implementaci\u00f3n en Java:</p> <pre><code>int opcion = teclado.nextInt();\nswitch (opcion) {\n    case 1:\n        System.out.println(\"Has elegido 'Ver perfil'\");\n        break; // \u00a1El 'break' es crucial! Sin \u00e9l, seguir\u00eda ejecutando los siguientes casos.\n    case 2:\n        System.out.println(\"Has elegido 'Editar cuenta'\");\n        break;\n    case 3:\n        System.out.println(\"Has elegido 'Cerrar sesi\u00f3n'\");\n        break;\n    default: // Se ejecuta si ning\u00fan 'case' coincide.\n        System.out.println(\"Opci\u00f3n no v\u00e1lida.\");\n        break;\n}\n</code></pre>"},{"location":"unidades/ud02/#55-estructuras-repetitivas-bucles","title":"5.5 Estructuras Repetitivas (Bucles)","text":"<p>Son las rotondas de nuestro c\u00f3digo. Permiten repetir un bloque de instrucciones m\u00faltiples veces.</p>"},{"location":"unidades/ud02/#551-bucle-while-mientras","title":"5.5.1 Bucle <code>while</code> (Mientras)","text":"<p>Repite un bloque de c\u00f3digo mientras una condici\u00f3n sea verdadera. La condici\u00f3n se comprueba antes de cada vuelta, por lo que podr\u00eda no ejecutarse nunca si la condici\u00f3n es falsa desde el principio.</p> <p></p> <p>\u00bfCu\u00e1ndo usarlo? Cuando no sabemos exactamente cu\u00e1ntas veces se repetir\u00e1 el bucle, pero s\u00ed la condici\u00f3n para que siga.</p> <p>Ejemplo: Tabla de multiplicar. Queremos que el usuario introduzca un n\u00famero y nos muestre por pantalla su tabla de multiplicar (por ejemplo, la del 5):</p> <pre><code>5 x 0 = 0\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n</code></pre> <p>Seguiremos el siguiente diagrama, f\u00edjate que utilizamos una variable llamada contador que se ir\u00e1 incrementando en cada vuelta (iteraci\u00f3n) del bucle.</p> <p></p> <p><pre><code>ALGORITMO TablaMultiplicarWhile\nVAR\n    ENTERO numero, i = 0\nINICIO\n    ESCRIBIR(\"Introduce un n\u00famero:\")\n    LEER(numero)\n    MIENTRAS (i &lt;= 10) HACER\n        ESCRIBIR(numero, \" x \", i, \" = \", (numero * i))\n        i = i + 1\n    FIN MIENTRAS\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>int numero = teclado.nextInt();\nint i = 0;\nwhile (i &lt;= 10) {\n    System.out.println(numero + \" x \" + i + \" = \" + (numero * i));\n    i++; // Abreviatura de i = i + 1\n}\n</code></pre></p>"},{"location":"unidades/ud02/#552-bucle-do-while-hacer-mientras","title":"5.5.2 Bucle <code>do-while</code> (Hacer-Mientras)","text":"<p>Similar al <code>while</code>, pero con una diferencia clave: la condici\u00f3n se comprueba despu\u00e9s de cada vuelta. Esto garantiza que el bloque de c\u00f3digo se ejecute al menos una vez.</p> <p></p> <p>\u00bfCu\u00e1ndo usarlo? Es perfecto para men\u00fas o validaciones, donde quieres que la acci\u00f3n se realice al menos una vez antes de comprobar si hay que repetirla.</p> <p>Ejemplo: Pedir un n\u00famero positivo. <pre><code>ALGORITMO PedirNumeroPositivo\nVAR\n    ENTERO numero\nINICIO\n    HACER\n        ESCRIBIR(\"Introduce un n\u00famero positivo:\")\n        LEER(numero)\n    MIENTRAS (numero &lt;= 0)\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>int numero;\ndo {\n    System.out.print(\"Introduce un n\u00famero positivo: \");\n    numero = teclado.nextInt();\n} while (numero &lt;= 0);\nSystem.out.println(\"N\u00famero introducido correcto: \" + numero);\n</code></pre></p>"},{"location":"unidades/ud02/#553-bucle-for-para","title":"5.5.3 Bucle <code>for</code> (Para)","text":"<p>Es el bucle ideal cuando sabemos de antemano el n\u00famero exacto de repeticiones. Compacta en una sola l\u00ednea la inicializaci\u00f3n del contador, la condici\u00f3n de fin y el incremento.</p> <p></p> <p>\u00bfCu\u00e1ndo usarlo? Para recorrer arrays, tablas de multiplicar, o cualquier tarea que se deba hacer un n\u00famero fijo de veces.</p> <p></p> <p>Ejemplo: Tabla de multiplicar (versi\u00f3n <code>for</code>). <pre><code>ALGORITMO TablaMultiplicarFor\nVAR\n    ENTERO numero, i\nINICIO\n    ESCRIBIR(\"Introduce un n\u00famero:\")\n    LEER(numero)\n    PARA i DESDE 0 HASTA 10 CON PASO 1 HACER\n        ESCRIBIR(numero, \" x \", i, \" = \", (numero * i))\n    FIN PARA\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>int numero = teclado.nextInt();\n// for (inicializaci\u00f3n; condici\u00f3n; incremento)\nfor (int i = 0; i &lt;= 10; i++) {\n    System.out.println(numero + \" x \" + i + \" = \" + (numero * i));\n}\n</code></pre></p>"},{"location":"unidades/ud02/#6-elementos-auxiliares-nuestras-herramientas-especializadas","title":"6 Elementos Auxiliares: Nuestras Herramientas Especializadas","text":"<p>Dentro de los bucles, es com\u00fan usar variables con roles muy espec\u00edficos. Darles un \"apodo\" nos ayuda a entender su funci\u00f3n al instante.</p> <ul> <li>Contadores: Cuentan sucesos, normalmente incrementando de uno en uno. Ejemplos <code>i, j, contador, cont</code> Analog\u00eda: El portero de una discoteca que pulsa un contador cada vez que entra una persona.</li> <li>Acumuladores (o Sumadores): Acumulan un total sumando cantidades variables. Ejemplos <code>suma, total, acumulado</code>. Analog\u00eda: El carrito de la compra donde vas a\u00f1adiendo productos con precios diferentes.</li> <li>Interruptores (o Banderas/Flags): Variables <code>boolean</code> que act\u00faan como un interruptor de luz (<code>true</code>/<code>false</code>). Se usan para \"recordar\" si un evento ha ocurrido. Ejemplos <code>end, fin, haTerminado, salir</code>.Analog\u00eda: Una bandera que se levanta para se\u00f1alar que se ha encontrado lo que se buscaba.</li> </ul>"},{"location":"unidades/ud02/#7-vectores-y-matrices-almacenando-datos-en-coleccion","title":"7 Vectores y Matrices: Almacenando Datos en Colecci\u00f3n","text":"<p>Hasta ahora, cada variable guardaba un solo dato. Pero, \u00bfy si necesitamos guardar las notas de 30 alumnos? \u00bfO los precios de 100 productos? Para eso usamos los arrays (vectores y matrices).</p>"},{"location":"unidades/ud02/#71-vectores-arrays-unidimensionales","title":"7.1 Vectores (Arrays Unidimensionales)","text":"<p>Un vector (array) es una estructura que almacena un conjunto de datos del mismo tipo en posiciones de memoria contiguas.</p> <p></p> <p>Analog\u00eda: Piensa en un tren. El tren entero es el vector. Cada vag\u00f3n es un elemento que guarda un dato, y el n\u00famero del vag\u00f3n es su \u00edndice. \u00a1Importante! El primer vag\u00f3n es siempre el n\u00famero 0.</p> <p>Declaraci\u00f3n en Java: <pre><code>int[] notas = new int[30]; // Un \"tren\" para 30 notas enteras\nString[] nombres = new String[30]; // Un \"tren\" para 30 nombres\n</code></pre> Acceso a los elementos: <pre><code>notas[0] = 7; // Asignamos un 7 a la primera nota (vag\u00f3n 0)\nSystem.out.println(nombres[2]); // Mostramos el nombre del tercer alumno (vag\u00f3n 2)\n</code></pre> Los bucles <code>for</code> son el compa\u00f1ero perfecto para recorrer vectores: <pre><code>// Pedir las 30 notas por teclado\nfor (int i = 0; i &lt; notas.length; i++) {\n    System.out.print(\"Introduce la nota del alumno \" + (i + 1) + \": \");\n    notas[i] = teclado.nextInt();\n}\n</code></pre></p>"},{"location":"unidades/ud02/#declaracion-e-inicializacion-directa","title":"Declaraci\u00f3n e Inicializaci\u00f3n Directa","text":"<p>Si ya conocemos los valores que va a contener nuestro vector, podemos declararlo e inicializarlo en un solo paso. Esto es muy pr\u00e1ctico para listas de datos que no cambian, como los d\u00edas de la semana.</p> <p>Ejemplo: Crear un vector con los d\u00edas de la semana y mostrarlo. <pre><code>public class DiasSemana {\n    public static void main(String[] args) {\n        // Declaramos e inicializamos el vector en un solo paso\n        String[] dias = {\"Lunes\", \"Martes\", \"Mi\u00e9rcoles\", \"Jueves\", \"Viernes\", \"S\u00e1bado\", \"Domingo\"};\n\n        System.out.println(\"Los d\u00edas de la semana son:\");\n        // Recorremos el vector para mostrar su contenido\n        for (int i = 0; i &lt; dias.length; i++) {\n            System.out.println(\"- \" + dias[i]);\n        }\n    }\n}\n</code></pre></p>"},{"location":"unidades/ud02/#caso-de-uso-1-acumulador-calcular-el-total-de-una-cesta-de-la-compra","title":"Caso de Uso 1: Acumulador - Calcular el total de una cesta de la compra","text":"<p>Este es un ejemplo cl\u00e1sico. Usamos un vector para guardar los precios de varios productos y un acumulador para obtener el total.</p> <p>Pseudoc\u00f3digo: <pre><code>ALGORITMO CestaCompra\nVAR\n    REAL precios[5]\n    REAL total = 0.0\n    ENTERO i\nINICIO\n    // Llenamos el vector con los precios\n    PARA i DESDE 0 HASTA 4 CON PASO 1 HACER\n        ESCRIBIR(\"Introduce el precio del producto \", i + 1, \":\")\n        LEER(precios[i])\n    FIN PARA\n\n    // Recorremos el vector y acumulamos el total\n    PARA i DESDE 0 HASTA 4 CON PASO 1 HACER\n        total = total + precios[i]\n    FIN PARA\n\n    ESCRIBIR(\"El total de la compra es: \", total)\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>double[] precios = new double[5];\ndouble total = 0.0;\nScanner teclado = new Scanner(System.in);\n\n// Llenamos el vector\nfor (int i = 0; i &lt; precios.length; i++) {\n    System.out.print(\"Introduce el precio del producto \" + (i + 1) + \": \");\n    precios[i] = teclado.nextDouble();\n}\n\n// Recorremos y acumulamos\nfor (int i = 0; i &lt; precios.length; i++) {\n    total = total + precios[i];\n}\n\nSystem.out.println(\"El total de la compra es: \" + total);\n</code></pre></p>"},{"location":"unidades/ud02/#caso-de-uso-2-vectores-paralelos-relacionar-nombres-y-edades","title":"Caso de Uso 2: Vectores Paralelos - Relacionar Nombres y Edades","text":"<p>Los vectores paralelos son dos o m\u00e1s vectores en los que los datos del \u00edndice <code>i</code> de un vector est\u00e1n relacionados con los datos del mismo \u00edndice <code>i</code> del otro.</p> <p></p> <p>Ejemplo: Cargar 5 nombres y sus edades, y luego mostrar solo los nombres de los mayores de edad.</p> <p>Pseudoc\u00f3digo:</p> <p><pre><code>ALGORITMO MayoresDeEdad\nVAR\n    CADENA nombres[5]\n    ENTERO edades[5]\n    ENTERO i\nINICIO\n    // Llenamos ambos vectores a la vez\n    PARA i DESDE 0 HASTA 4 CON PASO 1 HACER\n        ESCRIBIR(\"Introduce el nombre de la persona \", i + 1, \":\")\n        LEER(nombres[i])\n        ESCRIBIR(\"Introduce la edad de \", nombres[i], \":\")\n        LEER(edades[i])\n    FIN PARA\n\n    ESCRIBIR(\"--- Personas mayores de edad ---\")\n    // Recorremos los vectores para comprobar la condici\u00f3n\n    PARA i DESDE 0 HASTA 4 CON PASO 1 HACER\n        SI (edades[i] &gt;= 18) ENTONCES\n            ESCRIBIR(nombres[i])\n        FIN SI\n    FIN PARA\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>String[] nombres = new String[5];\nint[] edades = new int[5];\nScanner teclado = new Scanner(System.in);\n\n// Llenamos los vectores paralelos\nfor (int i = 0; i &lt; nombres.length; i++) {\n    System.out.print(\"Introduce el nombre de la persona \" + (i + 1) + \": \");\n    nombres[i] = teclado.nextLine(); // Usamos nextLine para nombres completos\n\n    System.out.print(\"Introduce la edad de \" + nombres[i] + \": \");\n    edades[i] = teclado.nextInt();\n    teclado.nextLine(); // \u00a1Consumimos el salto de l\u00ednea fantasma!\n}\n\nSystem.out.println(\"--- Personas mayores de edad ---\");\n// Recorremos y mostramos\nfor (int i = 0; i &lt; nombres.length; i++) {\n    if (edades[i] &gt;= 18) {\n        System.out.println(nombres[i]);\n    }\n}\n</code></pre></p>"},{"location":"unidades/ud02/#72-matrices-arrays-bidimensionales","title":"7.2 Matrices (Arrays Bidimensionales)","text":"<p>Una matriz es, sencillamente, un vector de vectores. Permite organizar la informaci\u00f3n en una tabla con filas y columnas.</p> <p></p> <p>Analog\u00eda: Piensa en un tablero de ajerez o una hoja de c\u00e1lculo. Para localizar una casilla, necesitas dos coordenadas: la fila y la columna.</p> <p>Declaraci\u00f3n en Java: <pre><code>int[][] tablero = new int[8][8]; // Un tablero de 8x8\n</code></pre> Acceso a los elementos: <pre><code>tablero[0][0] = 1; // Asignamos un 1 a la casilla de la esquina superior izquierda (fila 0, columna 0)\n</code></pre> Para recorrer una matriz, necesitamos dos bucles <code>for</code> anidados: uno para las filas y otro para las columnas. <pre><code>// Recorrer e imprimir todo el tablero\nfor (int fila = 0; fila &lt; tablero.length; fila++) {\n    for (int col = 0; col &lt; tablero[fila].length; col++) {\n        System.out.print(tablero[fila][col] + \" \");\n    }\n    System.out.println(); // Salto de l\u00ednea al final de cada fila\n}\n</code></pre></p>"},{"location":"unidades/ud02/#declaracion-e-inicializacion-directa_1","title":"Declaraci\u00f3n e Inicializaci\u00f3n Directa","text":"<p>Adem\u00e1s de crear una matriz vac\u00eda y llenarla despu\u00e9s, si ya conocemos los valores que va a contener, podemos declararla e inicializarla en un solo paso. Esto es muy \u00fatil para tener datos de prueba o configuraciones fijas en un programa.</p> <p>La sintaxis utiliza llaves <code>{}</code> para delimitar la matriz completa y tambi\u00e9n para cada una de las filas.</p> <p>Ejemplo: Crear una matriz 3x3 con valores predefinidos. <pre><code>public class MatrizInicializada {\n    public static void main(String[] args) {\n        // Declaramos e inicializamos la matriz en un solo paso\n        int matriz[][] =  {\n            {1, 4, 7},\n            {2, 5, 8},\n            {3, 6, 9}\n        };\n\n        // Ahora podemos usarla, por ejemplo, para mostrarla\n        System.out.println(\"--- Matriz Inicializada ---\");\n        for (int i = 0; i &lt; matriz.length; i++) {\n            for (int j = 0; j &lt; matriz[i].length; j++) {\n                System.out.print(matriz[i][j] + \"\\t\");\n            }\n            System.out.println();\n        }\n    }\n}\n</code></pre></p>"},{"location":"unidades/ud02/#73-lectura-y-escritura-de-matrices","title":"7.3 Lectura y Escritura de Matrices","text":"<p>La tarea m\u00e1s com\u00fan con las matrices es llenarlas con datos (lectura) y luego mostrarlas (escritura). Para ello, siempre usaremos la misma estructura: dos bucles <code>for</code> anidados. El bucle exterior recorrer\u00e1 las filas y el interior las columnas.</p> <p>Ejemplo: Crear una matriz con dimensiones dadas por el usuario, llenarla y mostrarla.</p> <p>Pseudoc\u00f3digo: <pre><code>ALGORITMO GestionMatriz\nVAR\n    ENTERO filas, columnas\n    ENTERO i, j\nINICIO\n    ESCRIBIR(\"\u00bfCu\u00e1ntas filas tendr\u00e1 la matriz?\")\n    LEER(filas)\n    ESCRIBIR(\"\u00bfCu\u00e1ntas columnas tendr\u00e1 la matriz?\")\n    LEER(columnas)\n\n    // Declaramos la matriz con el tama\u00f1o din\u00e1mico\n    ENTERO matriz[filas][columnas]\n\n    // Lectura de datos\n    ESCRIBIR(\"--- Introduce los valores de la matriz ---\")\n    PARA i DESDE 0 HASTA filas - 1 HACER\n        PARA j DESDE 0 HASTA columnas - 1 HACER\n            ESCRIBIR(\"Introduce el valor para la celda [\", i, \"][\", j, \"]:\")\n            LEER(matriz[i][j])\n        FIN PARA\n    FIN PARA\n\n    // Escritura de datos\n    ESCRIBIR(\"--- La matriz resultante es ---\")\n    PARA i DESDE 0 HASTA filas - 1 HACER\n        PARA j DESDE 0 HASTA columnas - 1 HACER\n            ESCRIBIR(matriz[i][j], \"\\t\") // \\t es un tabulador para alinear\n        FIN PARA\n        ESCRIBIR_NUEVA_LINEA()\n    FIN PARA\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>import java.util.Scanner;\n\npublic class GestionMatriz {\n    public static void main(String[] args) {\n        Scanner teclado = new Scanner(System.in);\n\n        System.out.print(\"\u00bfCu\u00e1ntas filas tendr\u00e1 la matriz? \");\n        int filas = teclado.nextInt();\n        System.out.print(\"\u00bfCu\u00e1ntas columnas tendr\u00e1 la matriz? \");\n        int columnas = teclado.nextInt();\n\n        // Creamos la matriz con el tama\u00f1o que ha dicho el usuario\n        int[][] matriz = new int[filas][columnas];\n\n        // Bucle anidado para LEER y rellenar la matriz\n        System.out.println(\"--- Introduce los valores de la matriz ---\");\n        for (int i = 0; i &lt; filas; i++) {\n            for (int j = 0; j &lt; columnas; j++) {\n                System.out.print(\"Introduce el valor para la celda [\" + i + \"][\" + j + \"]: \");\n                matriz[i][j] = teclado.nextInt();\n            }\n        }\n\n        // Bucle anidado para ESCRIBIR y mostrar la matriz\n        System.out.println(\"\\n--- La matriz resultante es ---\");\n        for (int i = 0; i &lt; filas; i++) {\n            for (int j = 0; j &lt; columnas; j++) {\n                System.out.print(matriz[i][j] + \"\\t\"); // Usamos \\t para tabular y alinear\n            }\n            System.out.println(); // Salto de l\u00ednea al terminar cada fila\n        }\n    }\n}\n</code></pre></p>"},{"location":"unidades/ud02/#caso-de-uso-representar-un-tablero-de-tres-en-raya","title":"Caso de Uso: Representar un tablero de Tres en Raya","text":"<p>Un ejemplo perfecto de una matriz es un tablero de juego. Una matriz de 3x3 es ideal para el \"Tres en Raya\", donde podemos guardar los movimientos de los jugadores ('X' y 'O').</p> <p>Pseudoc\u00f3digo: <pre><code>ALGORITMO TresEnRaya\nVAR\n    CARACTER tablero[3][3]\n    ENTERO fila, col\nINICIO\n    // 1. Inicializar el tablero con casillas vac\u00edas\n    PARA fila DESDE 0 HASTA 2 HACER\n        PARA col DESDE 0 HASTA 2 HACER\n            tablero[fila][col] = '-'\n        FIN PARA\n    FIN PARA\n\n    // 2. Simular algunos movimientos\n    tablero[0][1] = 'X'\n    tablero[1][1] = 'O'\n    tablero[2][0] = 'X'\n\n    // 3. Mostrar el tablero por pantalla\n    ESCRIBIR(\"--- TABLERO DE JUEGO ---\")\n    PARA fila DESDE 0 HASTA 2 HACER\n        PARA col DESDE 0 HASTA 2 HACER\n            ESCRIBIR(tablero[fila][col], \" \") // Escribe la ficha\n        FIN PARA\n        ESCRIBIR_NUEVA_LINEA() // Salto de l\u00ednea al final de la fila\n    FIN PARA\nFIN\n</code></pre> Implementaci\u00f3n en Java: <pre><code>public class TresEnRaya {\n    public static void main(String[] args) {\n        char[][] tablero = new char[3][3];\n\n        // 1. Inicializar el tablero con '-'\n        for (int fila = 0; fila &lt; 3; fila++) {\n            for (int col = 0; col &lt; 3; col++) {\n                tablero[fila][col] = '-';\n            }\n        }\n\n        // 2. Simular movimientos\n        tablero[0][1] = 'X';\n        tablero[1][1] = 'O';\n        tablero[2][0] = 'X';\n\n        // 3. Mostrar el tablero\n        System.out.println(\"--- TABLERO DE JUEGO ---\");\n        for (int fila = 0; fila &lt; 3; fila++) {\n            for (int col = 0; col &lt; 3; col++) {\n                System.out.print(tablero[fila][col] + \" | \");\n            }\n            System.out.println(); // Salto de l\u00ednea para la siguiente fila\n        }\n    }\n}\n</code></pre> Salida del programa Java: <pre><code>--- TABLERO DE JUEGO ---\n- | X | - | \n- | O | - | \nX | - | - | \n</code></pre></p>"},{"location":"unidades/ud02/#8-strings-la-navaja-suiza-para-manejar-texto","title":"8 Strings: La navaja suiza para manejar texto","text":"<p>Un <code>String</code> en Java es un objeto que nos ofrece un mont\u00f3n de m\u00e9todos \u00fatiles para manipular cadenas de texto.</p> <p>La regla de oro: <code>equals()</code> para comparar, NO <code>==</code></p> <p><code>variable1 == variable2</code> compara si dos variables apuntan al mismo objeto en memoria. <code>variable1.equals(variable2)</code> compara si los contenidos (el texto) de los dos Strings son iguales.</p> <p>\u00a1Usar <code>==</code> para comparar el contenido de los Strings es uno de los errores m\u00e1s comunes y dif\u00edciles de detectar!</p> <p>M\u00e9todos m\u00e1s \u00fatiles de la clase <code>String</code>:</p> M\u00e9todo Descripci\u00f3n <code>length()</code> Devuelve el n\u00famero de caracteres (longitud). <code>charAt(indice)</code> Devuelve el car\u00e1cter en una posici\u00f3n espec\u00edfica. <code>toUpperCase()</code> / <code>toLowerCase()</code> Convierte la cadena a may\u00fasculas o min\u00fasculas. <code>substring(inicio, fin)</code> Extrae un trozo de la cadena. <code>indexOf(texto)</code> Busca un texto y devuelve la posici\u00f3n de su primera aparici\u00f3n (-1 si no lo encuentra). <code>contains(texto)</code> Devuelve <code>true</code> si la cadena contiene el texto especificado. <code>replace(viejo, nuevo)</code> Reemplaza todas las apariciones de un texto por otro. <code>trim()</code> Elimina los espacios en blanco al principio y al final. <code>split(delimitador)</code> Divide la cadena en un array de Strings usando un delimitador. <p>Ejemplo pr\u00e1ctico: Validar un email simple.</p> <pre><code>public class StringEjemplo {\n    public static void main(String[] args) {\n        String email = \"   ejemplo@DOMINIO.com   \";\n        int posArroba = 0;\n\n        // 1. Limpiamos espacios y lo pasamos a min\u00fasculas para unificar\n        String emailLimpio = email.trim().toLowerCase();\n        System.out.println(\"Email limpio: \" + emailLimpio); // \"ejemplo@dominio.com\"\n\n        // 2. Verificamos que contenga \"@\" y \".com\"\n        if (emailLimpio.contains(\"@\") &amp;&amp; emailLimpio.contains(\".com\")) {\n            System.out.println(\"El formato del email parece correcto.\");\n\n            // 3. Extraemos el nombre de usuario y el dominio\n            posArroba = emailLimpio.indexOf(\"@\");\n            String usuario = emailLimpio.substring(0, posArroba);\n            String dominio = emailLimpio.substring(posArroba + 1, emailLimpio.length());\n\n            System.out.println(\"Usuario: \" + usuario); // \"ejemplo\"\n            System.out.println(\"Dominio: \" + dominio); // \"dominio.com\"\n        } else {\n            System.out.println(\"Formato de email incorrecto.\");\n        }\n    }\n}\n</code></pre>"},{"location":"unidades/ud03/","title":"Unidad 3. Funciones y Procedimientos.","text":"Fecha Versi\u00f3n Descripci\u00f3n 19/09/2021 1.0.0 Versi\u00f3n inicial 22/09/2025 2.0.0 Versi\u00f3n revisada."},{"location":"unidades/ud03/#1-por-que-necesitamos-funciones","title":"1. \u00bfPor qu\u00e9 necesitamos Funciones?","text":"<p>Imagina que est\u00e1s construyendo un programa complejo. Al principio, todo tu c\u00f3digo est\u00e1 en el m\u00e9todo <code>main</code>. Pero pronto, <code>main</code> empieza a crecer sin control. Repites el mismo bloque de c\u00f3digo en varios sitios y, si encuentras un error en ese bloque, tienes que corregirlo en todos ellos. \u00a1Se convierte en un caos!</p> <p>Aqu\u00ed es donde entran las funciones (tambi\u00e9n conocidas como m\u00e9todos).</p> <p>Una funci\u00f3n es como una herramienta especializada que guardas en tu caja de herramientas. Es un bloque de c\u00f3digo con un nombre, dise\u00f1ado para hacer una tarea muy concreta. En lugar de reescribir el c\u00f3digo una y otra vez, simplemente \"usas la herramienta\" llam\u00e1ndola por su nombre.</p> <p>Ventajas principales de usar funciones:</p> <ul> <li>Reutilizaci\u00f3n: Escribes el c\u00f3digo una vez y lo llamas tantas veces como quieras.</li> <li>Organizaci\u00f3n: Dividen un problema grande en problemas m\u00e1s peque\u00f1os y manejables. \u00a1Adi\u00f3s al caos en <code>main</code>!</li> <li>Legibilidad: Un programa bien estructurado en funciones es mucho m\u00e1s f\u00e1cil de leer y entender.</li> <li>Mantenimiento: Si necesitas corregir o mejorar una tarea, solo tienes que modificar su funci\u00f3n, y el cambio se aplicar\u00e1 en todos los sitios donde se use.</li> </ul>"},{"location":"unidades/ud03/#2-anatomia-de-una-funcion-la-etiqueta-de-la-herramienta","title":"2. Anatom\u00eda de una Funci\u00f3n: La Etiqueta de la Herramienta","text":"<p>Cada funci\u00f3n tiene una \"etiqueta\" que nos dice todo lo que necesitamos saber sobre ella. Esta etiqueta es su declaraci\u00f3n o cabecera.</p> <p><code>[Modificadores] TipoDevuelto nombreDeLaFuncion(Lista de Par\u00e1metros)</code></p> <p>Vamos a desglosarlo con una analog\u00eda:</p> Parte de la Declaraci\u00f3n Analog\u00eda: La Etiqueta de la Herramienta Ejemplo: <code>public static int sumar(int a, int b)</code> Modificadores Las \"instrucciones de uso\" (p\u00fablica, est\u00e1tica...). <code>public static</code> (Por ahora, siempre usaremos estos). Tipo de Retorno Lo que la herramienta te devuelve al terminar. <code>int</code> (Esta herramienta te devolver\u00e1 un n\u00famero entero). Nombre de la Funci\u00f3n El nombre de la herramienta. Debe ser descriptivo. <code>sumar</code> (Claramente, esta herramienta sirve para sumar). Par\u00e1metros Los materiales que necesita la herramienta para trabajar. <code>(int a, int b)</code> (Necesita dos n\u00fameros enteros para poder hacer su trabajo). Cuerpo <code>{...}</code> El mecanismo interno de la herramienta. Las instrucciones que ejecuta. <code>{ int resultado = a + b; return resultado; }</code> (Suma los materiales y devuelve el resultado). <p>Ejemplo de c\u00f3digo completo:</p> <pre><code>/**\n * Esta es la implementaci\u00f3n completa de la funci\u00f3n descrita en la tabla.\n * Recibe dos enteros y devuelve su suma.\n */\npublic static int sumar(int a, int b) {\n    int resultado = a + b;\n    return resultado;\n}\n</code></pre>"},{"location":"unidades/ud03/#3-funciones-vs-procedimientos-devuelves-algo-o-solo-actuas","title":"3. Funciones vs. Procedimientos: \u00bfDevuelves algo o solo act\u00faas?","text":"<p>En nuestra caja de herramientas, tenemos dos tipos de especialistas:</p>"},{"location":"unidades/ud03/#31-funciones-las-que-devuelven-un-resultado","title":"3.1. Funciones (Las que devuelven un resultado)","text":"<p>Una funci\u00f3n es una herramienta que, despu\u00e9s de hacer su trabajo, te devuelve un resultado. Utiliza la palabra clave <code>return</code> para entregar ese resultado.</p> <pre><code>/**\n * Esta funci\u00f3n es como una calculadora: le das dos n\u00fameros\n * y te devuelve su producto.\n */\npublic static int multiplicar(int a, int b) {\n    int resultado = a * b;\n    return resultado; // Devuelve el valor calculado\n}\n\n// C\u00f3mo se usa:\nint producto = multiplicar(7, 5); // La variable 'producto' ahora vale 35\n</code></pre> <p>Aqu\u00ed tienes otro ejemplo cl\u00e1sico de una funci\u00f3n:</p> <pre><code>/**\n * Esta funci\u00f3n compara dos n\u00fameros y devuelve el mayor de los dos.\n */\npublic static double encontrarMaximo(double valor1, double valor2) {\n    if (valor1 &gt; valor2) {\n        return valor1;\n    } else {\n        return valor2;\n    }\n}\n\n// C\u00f3mo se usa:\ndouble maximo = encontrarMaximo(15.5, 9.2); // La variable 'maximo' ahora vale 15.5\n</code></pre>"},{"location":"unidades/ud03/#32-procedimientos-los-que-solo-realizan-una-accion","title":"3.2. Procedimientos (Los que solo realizan una acci\u00f3n)","text":"<p>Un procedimiento es una herramienta que realiza una tarea, pero no devuelve ning\u00fan resultado. En Java, los identificamos porque su \"Tipo de Retorno\" es <code>void</code> (vac\u00edo).</p> <pre><code>/**\n * Este procedimiento es como un altavoz: le das un mensaje\n * y simplemente lo muestra. No te devuelve nada.\n */\npublic static void saludar(String nombre) {\n    System.out.println(\"\u00a1Hola, \" + nombre + \"!\");\n    // No hay 'return' de un valor\n}\n\n// C\u00f3mo se usa:\nsaludar(\"\u00c1lex\"); // Muestra \"\u00a1Hola, \u00c1lex!\" en pantalla. No se puede asignar a una variable.\n</code></pre> Caracter\u00edstica Funci\u00f3n Procedimiento Prop\u00f3sito Calcular y devolver un valor. Ejecutar una serie de acciones. Retorno <code>int</code>, <code>double</code>, <code>String</code>, etc. <code>void</code> Palabra Clave Usa <code>return valor;</code> No suele usar <code>return</code> (o solo <code>return;</code>). Uso T\u00edpico <code>variable = miFuncion();</code> o dentro de una expresi\u00f3n. <code>miProcedimiento();</code> en una l\u00ednea sola."},{"location":"unidades/ud03/#4-ambito-de-las-variables-la-regla-de-la-habitacion-de-hotel","title":"4. \u00c1mbito de las Variables: La Regla de la Habitaci\u00f3n de Hotel","text":"<p>El \u00e1mbito o scope de una variable define d\u00f3nde es visible y se puede utilizar. La regla de oro es muy simple:</p> <p>\"Cada funci\u00f3n es su propia habitaci\u00f3n de hotel\"</p> <p>Cuando entras en la habitaci\u00f3n de hotel (llamas a una funci\u00f3n), puedes usar todo lo que hay dentro: la cama, la mesa, la tele (las variables locales y los par\u00e1metros). Pero cuando sales de la habitaci\u00f3n y cierras la puerta (la funci\u00f3n termina), ya no puedes acceder a nada de lo que hab\u00eda dentro. Esas variables \"desaparecen\" para el resto del programa.</p> <pre><code>public static void main(String[] args) {\n    int variableMain = 10; // Una variable en el \"pasillo\" del hotel (main)\n    miFuncion();\n    // System.out.println(variableDeFuncion); // \u00a1ERROR! No puedes ver dentro de la habitaci\u00f3n desde el pasillo.\n}\n\npublic static void miFuncion() { // Entras a la \"habitaci\u00f3n\"\n    int variableDeFuncion = 20; // Una variable dentro de la habitaci\u00f3n\n    System.out.println(variableDeFuncion); // Correcto, puedes usarla aqu\u00ed dentro.\n    // System.out.println(variableMain); // \u00a1ERROR! Desde dentro de la habitaci\u00f3n no ves lo que hay en el pasillo.\n}\n</code></pre> <p>Esta encapsulaci\u00f3n es fundamental, ya que garantiza que las funciones sean independientes y no interfieran unas con otras por accidente.</p>"},{"location":"unidades/ud03/#5-paso-de-parametros-fotocopias-vs-direcciones","title":"5. Paso de Par\u00e1metros: Fotocopias vs. Direcciones","text":"<p>Cuando llamamos a una funci\u00f3n y le pasamos datos, la forma en que Java los entrega depende del tipo de dato. \u00a1Entender esto es crucial!</p>"},{"location":"unidades/ud03/#51-paso-por-valor-te-paso-una-fotocopia-tipos-primitivos","title":"5.1. Paso por Valor: \"Te paso una fotocopia\" (Tipos Primitivos)","text":"<p>Cuando pasas un tipo primitivo (<code>int</code>, <code>double</code>, <code>char</code>, <code>boolean</code>...), Java no le da tu variable original a la funci\u00f3n. En su lugar, le da una copia exacta, una fotocopia.</p> <p>La funci\u00f3n puede hacer lo que quiera con esa fotocopia (cambiarle el valor, usarla en c\u00e1lculos...), pero tu variable original permanecer\u00e1 intacta.</p> <pre><code>public static void main(String[] args) {\n    int miNumero = 10;\n    System.out.println(\"Antes de llamar a la funci\u00f3n, miNumero vale: \" + miNumero); // Vale 10\n\n    intentarModificar(miNumero); // Le pasamos una FOTOCOPIA de miNumero\n\n    System.out.println(\"Despu\u00e9s de llamar a la funci\u00f3n, miNumero vale: \" + miNumero); // Sigue valiendo 10\n}\n\npublic static void intentarModificar(int numeroCopia) { // Recibe la fotocopia\n    numeroCopia = numeroCopia * 2; // Modificamos la COPIA a 20\n    System.out.println(\"Dentro de la funci\u00f3n, la copia vale: \" + numeroCopia); // Vale 20\n}\n</code></pre>"},{"location":"unidades/ud03/#52-paso-por-referencia-te-paso-la-direccion-arrays-y-objetos","title":"5.2. Paso por Referencia: \"Te paso la direcci\u00f3n\" (Arrays y Objetos)","text":"<p>Cuando pasas un array o un objeto, Java cambia de estrategia. En lugar de copiar toda la estructura (lo cual ser\u00eda muy ineficiente), le pasa a la funci\u00f3n la direcci\u00f3n de memoria donde se encuentra el objeto original.</p> <p>La funci\u00f3n recibe la direcci\u00f3n, va a la \"casa\" original y trabaja directamente sobre ella. Por lo tanto, cualquier cambio que la funci\u00f3n haga en el array u objeto, afectar\u00e1 al original.</p> <pre><code>public static void main(String[] args) {\n    int[] misNotas = {7, 5, 8};\n    System.out.println(\"Notas originales: \"); // [7, 5, 8]\n    for (int i = 0; i &lt; misNotas.length; i++ ) {\n        System.out.println(misNotas[i]);\n    }\n\n    subirNotas(misNotas); // Le pasamos la DIRECCI\u00d3N de misNotas\n\n    System.out.println(\"Notas finales: \"); // \u00a1Han cambiado! [8, 6, 9]\n    for (int i = 0; i &lt; misNotas.length; i++ ) {\n        System.out.println(misNotas[i]);\n    }\n}\n\npublic static void subirNotas(int[] notas) { // Recibe la direcci\u00f3n del array\n    System.out.println(\"Recibido. Subiendo un punto a cada nota...\");\n    for (int i = 0; i &lt; notas.length; i++) {\n        notas[i] = notas[i] + 1; // Modificamos el array ORIGINAL\n    }\n}\n</code></pre>"},{"location":"unidades/ud03/#6-buenas-practicas-al-crear-funciones","title":"6. Buenas Pr\u00e1cticas al Crear Funciones","text":"<p>Para ser un buen programador, no basta con que las funciones funcionen. \u00a1Tambi\u00e9n deben ser elegantes!</p> <ol> <li>Principio de Responsabilidad \u00danica: Una funci\u00f3n debe hacer una sola cosa y hacerla bien. Si tu funci\u00f3n se llama <code>calcularYMostrarNota</code>, probablemente deber\u00eda dividirse en <code>calcularNota()</code> y <code>mostrarNota()</code>.</li> <li>Nombres Descriptivos: El nombre de una funci\u00f3n debe ser un verbo o una acci\u00f3n que deje claro su prop\u00f3sito. <code>calcularPromedio</code> es mucho mejor que <code>func1</code> o <code>calculo</code>.</li> <li>Pocos Par\u00e1metros: Intenta que tus funciones no necesiten demasiados \"materiales\". Si una funci\u00f3n requiere m\u00e1s de 3 o 4 par\u00e1metros, puede ser una se\u00f1al de que est\u00e1 haciendo demasiadas cosas.</li> <li>Comentarios <code>Javadoc</code>: Documenta tus funciones. Explica brevemente qu\u00e9 hacen, qu\u00e9 significa cada par\u00e1metro y qu\u00e9 devuelven. Esto es de gran ayuda para ti y para otros programadores.</li> </ol> <pre><code>/**\n * Calcula el \u00e1rea de un c\u00edrculo a partir de su radio.\n *\n * @param radio El radio del c\u00edrculo (debe ser un valor positivo).\n * @return El \u00e1rea calculada del c\u00edrculo.\n */\npublic static double calcularAreaCirculo(double radio) {\n    return Math.PI * Math.pow(radio, 2);\n}\n</code></pre>"},{"location":"unidades/ud03/#7-ejemplo-practico-mini-gestor-de-calificaciones","title":"7. Ejemplo Pr\u00e1ctico: Mini-Gestor de Calificaciones","text":"<p>Vamos a unir todo lo que hemos aprendido en un programa completo. Crearemos un peque\u00f1o gestor de notas que nos permitir\u00e1 introducir las calificaciones de un alumno, calcular la media, encontrar la nota m\u00e1s alta y mostrar un informe final.</p> <p>Este ejemplo te permitir\u00e1 ver en acci\u00f3n:</p> <ul> <li>El <code>main</code> como organizador.</li> <li>Procedimientos (<code>void</code>) para mostrar informaci\u00f3n.</li> <li>Funciones que devuelven valores.</li> <li>Paso de par\u00e1metros por valor y por referencia.</li> </ul>"},{"location":"unidades/ud03/#enunciado-del-problema","title":"Enunciado del Problema","text":"<p>Crear un programa que gestione las 5 notas de un alumno. El programa debe:</p> <ol> <li>Mostrar un mensaje de bienvenida.</li> <li>Solicitar al usuario que introduzca las 5 notas y guardarlas en un array.</li> <li>Calcular la nota media.</li> <li>Encontrar la nota m\u00e1s alta.</li> <li>Mostrar un informe completo con todas las notas, la media y la nota m\u00e1s alta.</li> </ol>"},{"location":"unidades/ud03/#codigo-de-la-solucion","title":"C\u00f3digo de la Soluci\u00f3n","text":"<pre><code>import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class GestorCalificaciones {\n\n    // ############### FUNCI\u00d3N PRINCIPAL (main) ###############\n    // Act\u00faa como el director de orquesta. No hace los c\u00e1lculos,\n    // solo llama a las herramientas (funciones) adecuadas en orden.\n    public static void main(String[] args) {\n\n        mostrarBienvenida(); // Llamada a un procedimiento\n\n        Scanner teclado = new Scanner(System.in);\n        double[] notas = new double[5];\n\n        // Llamamos a una herramienta para rellenar el array.\n        // Le pasamos la \"direcci\u00f3n\" del array (paso por referencia).\n        rellenarNotas(teclado, notas);\n\n        // Llamamos a herramientas que calculan y nos devuelven un resultado.\n        double media = calcularMedia(notas);\n        double notaMaxima = encontrarMaxima(notas);\n\n        // Finalmente, llamamos a un procedimiento para mostrarlo todo.\n        mostrarInforme(notas, media, notaMaxima);\n\n    } // Fin del main\n\n\n    // ############### HERRAMIENTAS (Funciones y Procedimientos) ###############\n\n    /**\n     * PROCEDIMIENTO: Muestra un mensaje de bienvenida.\n     * No necesita datos (par\u00e1metros) y no devuelve nada (void).\n     */\n    public static void mostrarBienvenida() {\n        System.out.println(\"--- Bienvenido al Gestor de Calificaciones ---\");\n        System.out.println(\"A continuaci\u00f3n, deber\u00e1s introducir 5 notas.\");\n        System.out.println(\"----------------------------------------------\");\n    }\n\n    /**\n     * PROCEDIMIENTO: Pide al usuario las notas y rellena el array.\n     * Recibe el Scanner y el array de notas.\n     * Como el array se pasa por REFERENCIA, los cambios hechos aqu\u00ed\n     * afectar\u00e1n al array original del main.\n     */\n    public static void rellenarNotas(Scanner teclado, double[] arrayNotas) {\n        for (int i = 0; i &lt; arrayNotas.length; i++) {\n            System.out.print(\"Introduce la nota \" + (i + 1) + \": \");\n            arrayNotas[i] = teclado.nextDouble();\n        }\n    }\n\n    /**\n     * FUNCI\u00d3N: Calcula la media de las notas de un array.\n     * Recibe un array de notas y DEVUELVE un double (la media).\n     */\n    public static double calcularMedia(double[] arrayNotas) {\n        double sumaTotal = 0;\n        for (int i = 0; i &lt; arrayNotas.length; i++) {\n            sumaTotal += arrayNotas[i]; // Acumulador\n        }\n        return sumaTotal / arrayNotas.length;\n    }\n\n    /**\n     * FUNCI\u00d3N: Encuentra la nota m\u00e1s alta en un array.\n     * Recibe un array de notas y DEVUELVE un double (la nota m\u00e1xima).\n     */\n    public static double encontrarMaxima(double[] arrayNotas) {\n        double max = arrayNotas[0]; // Suponemos que la primera es la m\u00e1s alta\n        for (int i = 1; i &lt; arrayNotas.length; i++) {\n            if (arrayNotas[i] &gt; max) {\n                max = arrayNotas[i]; // Encontramos una nueva m\u00e1xima\n            }\n        }\n        return max;\n    }\n\n    /**\n     * PROCEDIMIENTO: Muestra el informe final de calificaciones.\n     * Recibe el array de notas, la media y la m\u00e1xima.\n     * Los par\u00e1metros 'media' y 'maxima' se pasan por VALOR (fotocopias).\n     */\n    public static void mostrarInforme(double[] arrayNotas, double media, double maxima) {\n        System.out.println(\"\\n--- INFORME DE CALIFICACIONES ---\");\n        System.out.println(\"Notas introducidas: \" );\n        System.out.print(\"[\");\n        for (int i = 0; i &lt; arrayNotas.length; i++) {\n            System.out.print(arrayNotas[i]);\n            if (i != arrayNotas.length - 1) {\n                System.out.print(\", \");\n            }\n        }\n        System.out.println(\"]\");\n        System.out.printf(\"Nota Media: %.2f\\n\", media);\n        System.out.println(\"Nota m\u00e1s Alta: \" + maxima);\n        System.out.println(\"---------------------------------\");\n    }\n}\n</code></pre>"}]}